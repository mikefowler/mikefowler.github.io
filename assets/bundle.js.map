{"version":3,"file":"bundle.js","sources":["../_javascripts/detectFeatures.js","../_javascripts/lazyLoadImages.js","../_javascripts/main.js"],"sourcesContent":["export default function detectFeatures() {\n  const hasTouchSupport = 'ontouchstart' in window;\n\n  if (!hasTouchSupport) {\n    document.documentElement.classList.add('no-touch');\n  }\n}\n","const LOADING_CLASS = 'lazy-image--loading';\nconst LOADED_CLASS = 'lazy-image--loaded';\nconst images = [];\n\nfunction isElementInViewport(el) {\n  const bounds = el.getBoundingClientRect();\n\n  return (\n    bounds.top >= 0 &&\n    bounds.left >= 0 &&\n    bounds.top <= window.innerHeight\n  );\n}\n\nfunction loadImage(el) {\n  const imageSrc = el.getAttribute('data-src');\n  const backgroundEl = el.querySelector('.js-lazy-image-background');\n  const image = new Image();\n  let shimmerTimeout;\n\n  image.onload = () => {\n    // The onload event only needs to run once, so\n    // we deference this function.\n    image.onload = null;\n\n    // Set the background image source\n    backgroundEl.style.backgroundImage = `url(${imageSrc})`;\n\n    // Swap the loading class for the loaded class on the root element\n    el.classList.remove(LOADING_CLASS);\n    el.classList.add(LOADED_CLASS);\n\n    // Clear the shimmer timeout\n    if (shimmerTimeout) {\n      clearTimeout(shimmerTimeout);\n    }\n  };\n\n  // If an image takes longer than 200 milliseconds to load, we\n  // add a shimmer effect to the container. The delay also prevents\n  // the shimmer from displaying for images that are already cached\n  // which can look noisy.\n  shimmerTimeout = setTimeout(() => {\n    el.classList.add(LOADING_CLASS);\n  }, 200);\n\n  // Setting the source of the Image object kicks off the loading process\n  image.src = imageSrc;\n}\n\nfunction loadImagesInViewport() {\n  images.forEach((image, i) => {\n    if (isElementInViewport(image)) {\n      loadImage(image);\n      images.splice(i, 1);\n    }\n  });\n}\n\nexport default function lazyLoadImages() {\n  const query = document.querySelectorAll('.js-lazy-image');\n\n  for (let i = 0; i < query.length; i += 1) {\n    images.push(query[i]);\n  }\n\n  loadImagesInViewport();\n  document.addEventListener('scroll', loadImagesInViewport);\n}\n","import detectFeatures from './detectFeatures';\nimport lazyLoadImages from './lazyLoadImages';\n\nfunction init() {\n  detectFeatures();\n  lazyLoadImages();\n}\n\nwindow.addEventListener('DOMContentLoaded', init);\n"],"names":["detectFeatures","window","document","documentElement","classList","add","isElementInViewport","el","const","bounds","getBoundingClientRect","top","left","innerHeight","loadImage","shimmerTimeout","imageSrc","getAttribute","backgroundEl","querySelector","image","Image","onload","style","backgroundImage","remove","LOADING_CLASS","LOADED_CLASS","clearTimeout","setTimeout","src","loadImagesInViewport","images","forEach","i","splice","lazyLoadImages","let","query","querySelectorAll","length","push","addEventListener","init"],"mappings":"wBAAe,SAASA,KACE,gBAAkBC,SAGxCC,SAASC,gBAAgBC,UAAUC,IAAI,YCA3C,QAASC,GAAoBC,GAC3BC,GAAMC,GAASF,EAAGG,uBAElB,OACED,GAAOE,KAAO,GACdF,EAAOG,MAAQ,GACfH,EAAOE,KAAOV,OAAOY,YAIzB,QAASC,GAAUP,GACjBC,GAGIO,GAHEC,EAAWT,EAAGU,aAAa,YAC3BC,EAAeX,EAAGY,cAAc,6BAChCC,EAAQ,GAAIC,MAGlBD,GAAME,OAAS,WAGbF,EAAME,OAAS,KAGfJ,EAAaK,MAAMC,gBAAkB,OAAOR,MAG5CT,EAAGH,UAAUqB,OAAOC,GACpBnB,EAAGH,UAAUC,IAAIsB,GAGbZ,GACFa,aAAab,IAQjBA,EAAiBc,WAAW,WAC1BtB,EAAGH,UAAUC,IAAIqB,IAChB,KAGHN,EAAMU,IAAMd,EAGd,QAASe,KACPC,EAAOC,QAAQ,SAACb,EAAOc,GACjB5B,EAAoBc,KACtBN,EAAUM,GACVY,EAAOG,OAAOD,EAAG,MAKvB,QAAwBE,KAGtB,IAAKC,GAFCC,GAAQpC,SAASqC,iBAAiB,kBAE/BL,EAAI,EAAGA,EAAII,EAAME,OAAQN,GAAK,EACrCF,EAAOS,KAAKH,EAAMJ,GAGpBH,KACA7B,SAASwC,iBAAiB,SAAUX,GChEtC,QAASY,KACP3C,IACAoC,IDLF5B,GAAMkB,GAAgB,sBAChBC,EAAe,qBACfK,ICMN/B,QAAOyC,iBAAiB,mBAAoBC"}