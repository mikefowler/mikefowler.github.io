{"version":3,"file":"podcast.bundle.js","sources":["../../_javascripts/podcast.js","../../node_modules/amplitudejs/dist/amplitude.js"],"sourcesContent":["import Amplitude from 'amplitudejs';\n\nfunction init() {\n  const episodes = window.MRF.episodes || [];\n\n  Amplitude.init({\n    songs: episodes,\n  });\n}\n\nwindow.addEventListener('DOMContentLoaded', init);\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Amplitude\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Amplitude\"] = factory();\n\telse\n\t\troot[\"Amplitude\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 8);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/*\n|-------------------------------------------------------------------------------\n| Module Variables\n|-------------------------------------------------------------------------------\n| These variables make Amplitude run. The config is the most important\n| containing active settings and parameters. \n*/\n/*--------------------------------------------------------------------------\n\tThe config JSON is the global settings for ALL of Amplitude functions.\n\tThis is global and contains all of the user preferences. The default\n\tsettings are set, and the user overwrites them when they initialize\n\tAmplitude.\n--------------------------------------------------------------------------*/\nvar config = {\n\t/*\n \tThe audio element we will be using to handle all of the audio. This\n \tis the javascript version of the HTML5 audio element.\n */\n\tactive_song: new Audio(),\n\n\t/*\n \tJSON object that contains the active metadata for the song.\n */\n\tactive_metadata: {},\n\n\t/*\n \tString to hold the active album name. Used to check and see if the\n \talbum changed and run the album changed callback.\n */\n\tactive_album: '',\n\n\t/*\n \tContains the index of the actively playing song.\n */\n\tactive_index: 0,\n\n\t/*\n \tContains the key to the active playlist index.\n */\n\tactive_playlist: '',\n\n\t/*\n \tSet to true to autoplay the song\n */\n\tautoplay: false,\n\n\t/*\n \tSets the initial playback speed of the song. The values\n \tfor this can be 1.0, 1.5, 2.0\n */\n\tplayback_speed: 1.0,\n\n\t/*\n \tThe user can pass a JSON object with a key => value store of callbacks\n \tto be run at certain events.\n */\n\tcallbacks: {},\n\n\t/*\n \tObject containing all of the songs the user has passed to Amplitude\n \tto use.\n */\n\tsongs: {},\n\n\t/*\n \tObject containing all of the playlists the user created.\n */\n\tplaylists: {},\n\n\t/*\n \tObject that will contain shuffled playlists.\n */\n\tshuffled_playlists: {},\n\n\t/*\n \tObject that contains whether the current playlist is in \n \tshuffle mode or not.\n */\n\tshuffled_statuses: {},\n\n\t/*\n \tObject that contains the active index in a shuffled playlist.\n */\n\tshuffled_active_indexes: {},\n\n\t/*\n \tWhen repeat is on, when the song ends the song will replay itself.\n */\n\trepeat: false,\n\n\t/*\n \tWhen shuffled, this gets populated with the songs the user provided\n \tin a random order.\n */\n\tshuffle_list: {},\n\n\t/*\n \tWhen shuffled is turned on this gets set to true so when traversing\n \tthrough songs Amplitude knows whether or not to use the songs object\n \tor the shuffle_list.\n */\n\tshuffle_on: false,\n\n\t/*\n \tWhen shuffled, this index is used to let Amplitude know where it's\n \tat when traversing.\n */\n\tshuffle_active_index: 0,\n\n\t/*\n \tThe user can set default album art to be displayed if the song they\n \tset doesn't contain album art.\n */\n\tdefault_album_art: '',\n\n\t/*\n \tWhen set to true, Amplitude will print to the console any errors\n \tthat it runs into providing helpful feedback to the user.\n */\n\tdebug: false,\n\n\t/*\n \tThe user can set the initial volume to a number between 0 and 1\n \toverridding a default of .5.\n */\n\tvolume: .5,\n\n\t/*\n \tThis is set on mute so that when a user un-mutes Amplitude knows\n \twhat to restore the volume to.\n */\n\tpre_mute_volume: .5,\n\n\t/*\n \tThis is an integer between 1 and 100 for how much the volume should\n \tincrease when the user presses a volume up button.\n */\n\tvolume_increment: 5,\n\n\t/*\n \tThis is an integer between 1 and 100 for how much the volume should\n \tdecrease when the user presses a volume down button.\n */\n\tvolume_decrement: 5,\n\n\t/*\n \tWhen using SoundCloud, the user will have to provide their API Client\n \tID\n */\n\tsoundcloud_client: '',\n\n\t/*\n \tThe user can set this to true and Amplitude will use the album art\n \tfor the song returned from the Soundcloud API\n */\n\tsoundcloud_use_art: false,\n\n\t/*\n \tUsed on config to count how many songs are from soundcloud and\n \tcompare it to how many are ready for when to move to the rest\n \tof the configuration.\n */\n\tsoundcloud_song_count: 0,\n\n\t/*\n \tUsed on config to count how many songs are ready so when we get\n \tall of the data from the SoundCloud API that we need this should\n \tmatch the SoundCloud song count meaning we can move to the rest\n \tof the config.\n */\n\tsoundcloud_songs_ready: 0,\n\n\tis_touch_moving: false\n};\n\nmodule.exports = config;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _core = __webpack_require__(3);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _visual = __webpack_require__(2);\n\nvar _visual2 = _interopRequireDefault(_visual);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar config = __webpack_require__(0);\n\n\n/*\n|----------------------------------------------------------------------------------------------------\n| HELPER FUNCTIONS\n|----------------------------------------------------------------------------------------------------\n| For the sake of code clarity, these functions perform helper tasks \n| assisting the logical functions with what they need such as setting\n| the proper song index after an event has occured.\n|\n| METHODS\n|\tresetConfig()\n|\twriteDebugMessage( message )\n|\trunCallback( callbackName )\n|\tchangeSong( songIndex )\n*/\nvar AmplitudeHelpers = function () {\n\t/*--------------------------------------------------------------------------\n \tResets the config to the default state. This is called on initialize\n \tto ensure the user's config is what matters.\n --------------------------------------------------------------------------*/\n\tfunction resetConfig() {\n\t\tconfig.active_song = new Audio();\n\t\tconfig.active_metadata = {};\n\t\tconfig.active_album = '';\n\t\tconfig.active_index = 0;\n\t\tconfig.active_playlist = '';\n\t\tconfig.autoplay = false;\n\t\tconfig.playback_speed = 1.0;\n\t\tconfig.callbacks = {};\n\t\tconfig.songs = {};\n\t\tconfig.playlists = {};\n\t\tconfig.shuffled_playlists = {};\n\t\tconfig.shuffled_statuses = {};\n\t\tconfig.repeat = false;\n\t\tconfig.shuffle_list = {};\n\t\tconfig.shuffle_on = false;\n\t\tconfig.shuffle_active_index = 0;\n\t\tconfig.default_album_art = '';\n\t\tconfig.debug = false;\n\t\tconfig.handle_song_elements = true;\n\t\tconfig.volume = .5;\n\t\tconfig.pre_mute_volume = .5;\n\t\tconfig.volume_increment = 5;\n\t\tconfig.volume_decrement = 5;\n\t\tconfig.soundcloud_client = '';\n\t\tconfig.soundcloud_use_art = false;\n\t\tconfig.soundcloud_song_count = 0;\n\t\tconfig.soundcloud_songs_ready = 0;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tWrites out debug message to the console if enabled.\n \t\t@param string message The string that gets printed to\n \talert the user of a debugging error.\n --------------------------------------------------------------------------*/\n\tfunction writeDebugMessage(message) {\n\t\tif (config.debug) {\n\t\t\tconsole.log(message);\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tRuns a user defined callback method\n \t\t@param string callbackName The name of the callback we are going to run.\n --------------------------------------------------------------------------*/\n\tfunction runCallback(callbackName) {\n\t\t/*\n  \tChecks to see if a user defined a callback method for the\n  \tcallback we are running.\n  */\n\t\tif (config.callbacks[callbackName]) {\n\t\t\t/*\n   \tBuild the callback function\n   */\n\t\t\tvar callbackFunction = window[config.callbacks[callbackName]];\n\n\t\t\t/*\n   \tWrite a debug message stating the callback we are running\n   */\n\t\t\twriteDebugMessage('Running Callback: ' + callbackName);\n\n\t\t\t/*\n   \tRun the callback function.\n   */\n\t\t\ttry {\n\t\t\t\tcallbackFunction();\n\t\t\t} catch (error) {\n\t\t\t\t// undocumented way to cancel events\n\t\t\t\tif (error.message == \"CANCEL EVENT\") throw error;else writeDebugMessage('Callback error: ' + error.message);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tChanges the active song in the config. This happens in multiple\n \tscenarios: The user clicks a play button that has an index that is\n \tdifferent than what is currently playing, the song ends and the next\n \tsong begins, etc.\n \t\t@param int songIndex The song index we are changing to\n --------------------------------------------------------------------------*/\n\tfunction changeSong(songIndex) {\n\t\tvar song = config.songs[songIndex];\n\n\t\t/*\n  \tStops the currently playing song so we can adjust\n  \twhat we need.\n  */\n\t\t_core2.default.stop();\n\n\t\t/*\n  \tFX-TODO: Stop Visualization\n  */\n\n\t\t/*\n  \tSet all play buttons to pause while we change\n  \tthe song.\n  */\n\t\t_visual2.default.setPlayPauseButtonsToPause();\n\n\t\t/*\n  \tSince it is a new song, we reset the song sliders. These\n  \treact to time updates and will eventually be updated but we\n  \tforce update them is if there is a song slider bound to a\n  \tspecific song, they won't update.\n  */\n\t\t_visual2.default.resetSongSliders();\n\n\t\t/*\n  \tReset the song time vizualizations as well since those\n  \tcan be bound to a specific song.\n  */\n\t\t_visual2.default.resetSongTimeVisualizations();\n\n\t\t/*\n  \tReset all the time place holders accordingly.\n  */\n\t\t_visual2.default.resetTimes();\n\n\t\t/*\n  \tRun a callback if an album is going\n  \tto change.\n  */\n\t\tif (checkNewAlbum(song)) {\n\t\t\trunCallback('album_change');\n\t\t}\n\n\t\t/*\n  \tSet the new song information so we can use the\n  \tactive meta data later on.\n  */\n\t\tsetNewSong(song, songIndex);\n\n\t\t/*\n  \tDisplay the new visual metadata now that the config has\n  \tbeen changed. This will show the new song.\n  */\n\t\t_visual2.default.displaySongMetadata();\n\n\t\t/*\n  \tSets the active container. This is a class that\n  \tdesigners can use on an element that contains the current\n  \tsong's controls to show it's highlighted.\n  */\n\t\t_visual2.default.setActiveContainer();\n\n\t\t/*\n  \tSets the active song's duration\n  */\n\t\t_visual2.default.syncSongDuration();\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tChecks to see if the new song to be played is different than the song\n \tthat is currently playing. To be true, the user would have selected\n \tplay on a new song with a new index. To be false, the user would have\n \tclicked play/pause on the song that was playing.\n \t\t@param int songIndex The index of the new song to be played.\n --------------------------------------------------------------------------*/\n\tfunction checkNewSong(songIndex) {\n\t\tif (songIndex != config.active_index) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tChecks to see if there is a new album\n \t\t@param string newAlbum Checks to see if the new song will have a new\n \talbum.\n --------------------------------------------------------------------------*/\n\tfunction checkNewAlbum(newAlbum) {\n\t\tif (config.active_album != newAlbum) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tChecks to see if there is a new playlist\n \t\t@param string playlist The playlist passed in to check against the active\n \tplaylist.\n --------------------------------------------------------------------------*/\n\tfunction checkNewPlaylist(playlist) {\n\t\tif (config.active_playlist != playlist) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the new song in the config. Sets the src of the audio object, \n \tupdates the\tmetadata and sets the active album.\n \t\t@param JSON song The song object of the song we are changing to.\n \t@param int index The index of the song in the songs object we are changing.\n --------------------------------------------------------------------------*/\n\tfunction setNewSong(song, index) {\n\t\tconfig.active_song.src = song.url;\n\t\tconfig.active_metadata = song;\n\t\tconfig.active_album = song.album;\n\t\tconfig.active_index = index;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tShuffles individual songs in the config\n \t\tBased off of: http://www.codinghorror.com/blog/2007/12/the-danger-of-naivete.html\n --------------------------------------------------------------------------*/\n\tfunction shuffleSongs() {\n\t\t/*\n  \tBuilds a temporary array with the length of the config.\n  */\n\t\tvar shuffleTemp = new Array(config.songs.length);\n\n\t\t/*\n  \tSet the temporary array equal to the songs array.\n  */\n\t\tfor (var i = 0; i < config.songs.length; i++) {\n\t\t\tshuffleTemp[i] = config.songs[i];\n\t\t\tshuffleTemp[i].original_index = i;\n\t\t}\n\n\t\t/*\n  \tIterate ove rthe songs and generate random numbers to \n  \tswap the indexes of the shuffle array.\n  */\n\t\tfor (var i = config.songs.length - 1; i > 0; i--) {\n\t\t\tvar randNum = Math.floor(Math.random() * config.songs.length + 1);\n\t\t\tshuffleSwap(shuffleTemp, i, randNum - 1);\n\t\t}\n\n\t\t/*\n  \tSet the shuffle list to the shuffle temp.\n  */\n\t\tconfig.shuffle_list = shuffleTemp;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tShuffle songs in a playlist\n \t\t@param string playlist The playlist we are shuffling.\n --------------------------------------------------------------------------*/\n\tfunction shufflePlaylistSongs(playlist) {\n\t\t/*\n  \tBuilds a temporary array with the length of the playlist songs.\n  */\n\t\tvar shuffleTemp = new Array(config.playlists[playlist].length);\n\n\t\t/*\n  \tSet the temporary array equal to the playlist array.\n  */\n\t\tfor (var i = 0; i < config.playlists[playlist].length; i++) {\n\t\t\tshuffleTemp[i] = config.songs[config.playlists[playlist][i]];\n\t\t\tshuffleTemp[i].original_index = i;\n\t\t}\n\n\t\t/*\n  \tIterate ove rthe songs and generate random numbers to \n  \tswap the indexes of the shuffle array.\n  */\n\t\tfor (var i = config.playlists[playlist].length - 1; i > 0; i--) {\n\t\t\tvar randNum = Math.floor(Math.random() * config.playlists[playlist].length + 1);\n\t\t\tshuffleSwap(shuffleTemp, i, randNum - 1);\n\t\t}\n\n\t\t/*\n  \tSet the shuffle list to the shuffle temp.\n  */\n\t\tconfig.shuffled_playlists[playlist] = shuffleTemp;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSwaps and randomizes the song shuffle.\n \t\t@param JSON shuffleList The list of songs that is going to\n \tbe shuffled\n \t\t@param int original The original index of the song in the\n \tsongs array.\n \t\t@param int random The randomized index that will be the\n \tnew index of the song in the shuffle array.\n --------------------------------------------------------------------------*/\n\tfunction shuffleSwap(shuffleList, original, random) {\n\t\tvar temp = shuffleList[original];\n\t\tshuffleList[original] = shuffleList[random];\n\t\tshuffleList[random] = temp;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the active playlist\n \t\t@param string playlist The string of the playlist being \n \tset to active.\n --------------------------------------------------------------------------*/\n\tfunction setActivePlaylist(playlist) {\n\t\tif (config.active_playlist != playlist) {\n\t\t\trunCallback('playlist_changed');\n\t\t}\n\n\t\tconfig.active_playlist = playlist;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tDetermines if the string passed in is a URL or not\n \n \t@param string url The string we are testing to see if it's a URL.\n --------------------------------------------------------------------------*/\n\tfunction isURL(url) {\n\t\tvar pattern = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n\t\treturn pattern.test(url);\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tDetermines if what is passed in is an integer or not.\n \n \t@param string int The variable we are testing to see is an integer or not.\n --------------------------------------------------------------------------*/\n\tfunction isInt(int) {\n\t\treturn !isNaN(int) && parseInt(Number(int)) == int && !isNaN(parseInt(int, 10));\n\t}\n\n\t/*\n \tReturns the public functions\n */\n\treturn {\n\t\tresetConfig: resetConfig,\n\t\twriteDebugMessage: writeDebugMessage,\n\t\trunCallback: runCallback,\n\t\tchangeSong: changeSong,\n\t\tcheckNewSong: checkNewSong,\n\t\tcheckNewAlbum: checkNewAlbum,\n\t\tcheckNewPlaylist: checkNewPlaylist,\n\t\tshuffleSongs: shuffleSongs,\n\t\tshufflePlaylistSongs: shufflePlaylistSongs,\n\t\tsetActivePlaylist: setActivePlaylist,\n\t\tisURL: isURL,\n\t\tisInt: isInt\n\t};\n}();\n\nexports.default = AmplitudeHelpers;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _helpers = __webpack_require__(10);\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n|----------------------------------------------------------------------------------------------------\n| VISUAL SYNC METHODS\n|----------------------------------------------------------------------------------------------------\n| These methods sync visual displays with what is happening in Amplitude\n|\n| Method Prefix: privateVisualSync\n|\n| METHODS\n|\tsyncCurrentTime( currentTime, completionPercentage )\n|\tresetTimes()\n|\tresetSongSliders()\n|\tresetSongTimeVisualizations()\n|\tsetActiveContainer()\n|\tdisplaySongMetadata()\n|\tsyncPlaybackSpeed()\n| \tsyncVolumeSliders()\n| \tsetPlayPauseButtonsToPause()\n| \tsyncMainPlayPause( state )\n|\tsyncPlaylistPlayPause( playlist, state )\n| \tsyncSongPlayPause( playlist, song, state )\n| \tsyncRepeat()\n*/\nvar AmplitudeVisualSync = function () {\n\tvar _ref;\n\n\t/*--------------------------------------------------------------------------\n \tVisually displays the current time on the screen. This is called on\n \ttime update for the current song.\n \t\t@param JSON currentTime An object containing the current time for the\n \tsong in seconds, minutes, and hours.\n \t\t@param float completionPercentage The percent of the way through the song\n \tthe user is at.\n --------------------------------------------------------------------------*/\n\tfunction syncCurrentTime(currentTime, completionPercentage) {\n\t\t/*\n  \tSet current hour display.\n  */\n\t\t_helpers2.default.syncCurrentHours(currentTime.hours);\n\n\t\t/*\n  \tSet current minute display.\n  */\n\t\t_helpers2.default.syncCurrentMinutes(currentTime.minutes);\n\n\t\t/*\n  \tSet current second display.\n  */\n\t\t_helpers2.default.syncCurrentSeconds(currentTime.seconds);\n\n\t\t/*\n  \tSet current time display.\n  */\n\t\t_helpers2.default.syncCurrentTime(currentTime);\n\n\t\t/*\n  \tSet all song sliders to be to the current percentage\n  \tof the song played.\n  */\n\t\tsyncMainSliderLocation(completionPercentage);\n\t\tsyncPlaylistSliderLocation(_config2.default.active_playlist, completionPercentage);\n\t\tsyncSongSliderLocation(_config2.default.active_playlist, _config2.default.active_index, completionPercentage);\n\t\t/*\n  \tSet all visual sync song time visualizations. This will\n  \texpand the div inside of the visualization to be the song\n  \tplayed percentage.\n  */\n\t\t_helpers2.default.syncSongTimeVisualizations(completionPercentage);\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tVisually sync all of the times to the initial time of 0. This is so \n \twe can keep all the players in sync\n --------------------------------------------------------------------------*/\n\tfunction resetTimes() {\n\t\t_helpers2.default.resetCurrentHours();\n\t\t_helpers2.default.resetCurrentMinutes();\n\t\t_helpers2.default.resetCurrentSeconds();\n\t\t_helpers2.default.resetCurrentTime();\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tVisually syncs the song sliders back to 0. This usually happens when\n \ta song has changed, we ensure that all song sliders get reset.\n --------------------------------------------------------------------------*/\n\tfunction resetSongSliders() {\n\t\tvar songSliders = document.getElementsByClassName(\"amplitude-song-slider\");\n\n\t\t/*\n  \tIterate over all of the song sliders and set them to\n  \t0 essentially resetting them.\n  */\n\t\tfor (var i = 0; i < songSliders.length; i++) {\n\t\t\tsongSliders[i].value = 0;\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tVisually syncs the song time visualizations. Like the song sliders,\n \twhen a song is changed, these must be synced back to 0. Except 0 in\n \tthis circumstance is the visualization status has 0 width.\n --------------------------------------------------------------------------*/\n\tfunction resetSongTimeVisualizations() {\n\t\tvar songTimeVisualizations = document.getElementsByClassName(\"amplitude-song-time-visualization\");\n\n\t\t/*\n  \tIterate over all of the song time visualization elements and find their inner\n  \tstatus and set that element's width to 0.\n  */\n\t\tfor (var i = 0; i < songTimeVisualizations.length; i++) {\n\t\t\tvar songTimeVisualizationStatus = songTimeVisualizations[i].querySelector('.amplitude-song-time-visualization-status');\n\t\t\tsongTimeVisualizationStatus.setAttribute('style', 'width: 0px');\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tApplies the class 'amplitude-active-song-container' to the element \n \tcontaining visual information regarding the active song.\n --------------------------------------------------------------------------*/\n\tfunction setActiveContainer() {\n\t\tvar songContainers = document.getElementsByClassName('amplitude-song-container');\n\n\t\t/*\n  \tRemoves all of the active song containrs.\n  */\n\t\tfor (var i = 0; i < songContainers.length; i++) {\n\t\t\tsongContainers[i].classList.remove('amplitude-active-song-container');\n\t\t}\n\n\t\t/*\n  \tFinds the active index and adds the active song container to the element\n  \tthat represents the song at the index. \n  */\n\t\tif (_config2.default.active_playlist == '' || _config2.default.active_playlist == null) {\n\t\t\tif (document.querySelectorAll('.amplitude-song-container[amplitude-song-index=\"' + _config2.default.active_index + '\"]')) {\n\t\t\t\tvar songContainers = document.querySelectorAll('.amplitude-song-container[amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n\t\t\t\tfor (i = 0; i < songContainers.length; i++) {\n\t\t\t\t\tif (!songContainers[i].hasAttribute('amplitude-playlist')) {\n\t\t\t\t\t\tsongContainers[i].classList.add('amplitude-active-song-container');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (document.querySelectorAll('.amplitude-song-container[amplitude-song-index=\"' + _config2.default.active_index + '\"][amplitude-playlist=\"' + _config2.default.active_playlist + '\"]')) {\n\t\t\t\tvar songContainers = document.querySelectorAll('.amplitude-song-container[amplitude-song-index=\"' + _config2.default.active_index + '\"][amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n\t\t\t\tfor (i = 0; i < songContainers.length; i++) {\n\t\t\t\t\tsongContainers[i].classList.add('amplitude-active-song-container');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tDisplays the active song's metadata. This is called after a song has\n \tbeen changed. This method takes the active song and displays the\n \tmetadata. So once the new active song is set, we update all of the\n \tscreen elements.\n --------------------------------------------------------------------------*/\n\tfunction displaySongMetadata() {\n\t\t/*\n  \tDefine the image meta data keys. These are managed separately\n  \tsince we aren't actually changing the inner HTML of these elements.\n  */\n\t\tvar imageMetaDataKeys = ['cover_art_url', 'station_art_url', 'podcast_episode_cover_art_url'];\n\n\t\t/*\n  \tThese are the ignored keys that we won't be worrying about displaying.\n  \tEvery other key in the song object can be displayed.\n  */\n\t\tvar ignoredKeys = ['url', 'live'];\n\n\t\t/*\n  \tGet all of the song info elements\n  */\n\t\tvar songInfoElements = document.querySelectorAll('[amplitude-song-info]');\n\n\t\t/*\n  \tIterate over all of the song info elements. We will either\n  \tset these to the new values, or clear them if the active song\n  \tdoesn't have the info set.\n  */\n\t\tfor (var i = 0; i < songInfoElements.length; i++) {\n\t\t\t/*\n   \tGet the info so we can check if the active meta data has the\n   \tkey.\n   */\n\t\t\tvar info = songInfoElements[i].getAttribute('amplitude-song-info');\n\n\t\t\t/*\n   \tGet the song info element playlist.\n   */\n\t\t\tvar playlist = songInfoElements[i].getAttribute('amplitude-playlist');\n\n\t\t\t/*\n   \tGet the main song info flag.\n   */\n\t\t\tvar main = songInfoElements[i].getAttribute('amplitude-main-song-info');\n\n\t\t\t/*\n   \tIf the playlists match or the element is a main element, then\n   \twe set the song info.\n   */\n\t\t\tif (_config2.default.active_playlist == playlist || main == 'true') {\n\t\t\t\t/*\n    \tIf the active metadata has the key, then we set it,\n    \totherwise we clear it. If it's an image element then\n    \twe default it to the default info if needed.\n    */\n\t\t\t\tif (_config2.default.active_metadata[info] != undefined) {\n\t\t\t\t\tif (imageMetaDataKeys.indexOf(info) >= 0) {\n\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', _config2.default.active_metadata[info]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsongInfoElements[i].innerHTML = _config2.default.active_metadata[info];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/*\n     \tWe look for the default album art because\n     \tthe actual key didn't exist. If the default album\n     \tart doesn't exist then we set the src attribute\n     \tto null.\n     */\n\t\t\t\t\tif (imageMetaDataKeys.indexOf(info) >= 0) {\n\t\t\t\t\t\tif (_config2.default.default_album_art != '') {\n\t\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', _config2.default.default_album_art);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', '');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsongInfoElements[i].innerHTML = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction setFirstSongInPlaylist(song, playlist) {\n\t\t/*\n  \tDefine the image meta data keys. These are managed separately\n  \tsince we aren't actually changing the inner HTML of these elements.\n  */\n\t\tvar imageMetaDataKeys = ['cover_art_url', 'station_art_url', 'podcast_episode_cover_art_url'];\n\n\t\t/*\n  \tThese are the ignored keys that we won't be worrying about displaying.\n  \tEvery other key in the song object can be displayed.\n  */\n\t\tvar ignoredKeys = ['url', 'live'];\n\n\t\t/*\n  \tGet all of the song info elements\n  */\n\t\tvar songInfoElements = document.querySelectorAll('[amplitude-song-info][amplitude-playlist=\"' + playlist + '\"]');\n\n\t\t/*\n  \tIterate over all of the song info elements. We will either\n  \tset these to the new values, or clear them if the active song\n  \tdoesn't have the info set.\n  */\n\t\tfor (var i = 0; i < songInfoElements.length; i++) {\n\t\t\t/*\n   \tGet the info so we can check if the active meta data has the\n   \tkey.\n   */\n\t\t\tvar info = songInfoElements[i].getAttribute('amplitude-song-info');\n\n\t\t\t/*\n   \tGet the song info element playlist.\n   */\n\t\t\tvar elementPlaylist = songInfoElements[i].getAttribute('amplitude-playlist');\n\n\t\t\t/*\n   \tIf the playlists match or the element is a main element, then\n   \twe set the song info.\n   */\n\t\t\tif (elementPlaylist == playlist) {\n\t\t\t\t/*\n    \tIf the active metadata has the key, then we set it,\n    \totherwise we clear it. If it's an image element then\n    \twe default it to the default info if needed.\n    */\n\t\t\t\tif (song[info] != undefined) {\n\t\t\t\t\tif (imageMetaDataKeys.indexOf(info) >= 0) {\n\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', song[info]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsongInfoElements[i].innerHTML = song[info];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/*\n     \tWe look for the default album art because\n     \tthe actual key didn't exist. If the default album\n     \tart doesn't exist then we set the src attribute\n     \tto null.\n     */\n\t\t\t\t\tif (imageMetaDataKeys.indexOf(info) >= 0) {\n\t\t\t\t\t\tif (song.default_album_art != '') {\n\t\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', song.default_album_art);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', '');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsongInfoElements[i].innerHTML = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets all of the visual playback speed buttons to have the right class\n \tto display the background image that represents the current playback\n \tspeed.\n --------------------------------------------------------------------------*/\n\tfunction syncPlaybackSpeed() {\n\t\t/*\n  \tGets all of the playback speed classes.\n  */\n\t\tvar playbackSpeedClasses = document.getElementsByClassName(\"amplitude-playback-speed\");\n\n\t\t/*\n  \tIterates over all of the playback speed classes\n  \tapplying the right speed class for visual purposes.\n  */\n\t\tfor (var i = 0; i < playbackSpeedClasses.length; i++) {\n\t\t\t/*\n   \tRemoves all of the old playback speed classes.\n   */\n\t\t\tplaybackSpeedClasses[i].classList.remove('amplitude-playback-speed-10');\n\t\t\tplaybackSpeedClasses[i].classList.remove('amplitude-playback-speed-15');\n\t\t\tplaybackSpeedClasses[i].classList.remove('amplitude-playback-speed-20');\n\n\t\t\t/*\n   \tSwitch the current playback speed and apply the appropriate \n   \tspeed class.\n   */\n\t\t\tswitch (_config2.default.playback_speed) {\n\t\t\t\tcase 1:\n\t\t\t\t\tplaybackSpeedClasses[i].classList.add('amplitude-playback-speed-10');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1.5:\n\t\t\t\t\tplaybackSpeedClasses[i].classList.add('amplitude-playback-speed-15');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tplaybackSpeedClasses[i].classList.add('amplitude-playback-speed-20');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tVisually syncs the volume sliders so they are all the same if there\n \tare more than one.\n --------------------------------------------------------------------------*/\n\tfunction syncVolumeSliders() {\n\t\tvar amplitudeVolumeSliders = document.getElementsByClassName(\"amplitude-volume-slider\");\n\n\t\t/*\n  \tIterates over all of the volume sliders for the song, setting the value\n  \tto the config value.\n  */\n\t\tfor (var i = 0; i < amplitudeVolumeSliders.length; i++) {\n\t\t\tamplitudeVolumeSliders[i].value = _config2.default.active_song.volume * 100;\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets all of the play pause buttons to paused.\n --------------------------------------------------------------------------*/\n\tfunction setPlayPauseButtonsToPause() {\n\t\tvar playPauseElements = document.querySelectorAll('.amplitude-play-pause');\n\n\t\tfor (var i = 0; i < playPauseElements.length; i++) {\n\t\t\t_helpers2.default.setElementPause(playPauseElements[i]);\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSyncs the main play pause buttons to the state of the active song.\n \t\t@param string state The state of the player.\n --------------------------------------------------------------------------*/\n\tfunction syncMainPlayPause(state) {\n\t\tif (typeof state != \"string\") state = _config2.default.active_song.paused ? \"paused\" : \"playing\";\n\t\t/*\n  \tGet all play pause buttons.\n  */\n\t\tvar playPauseElements = document.querySelectorAll('.amplitude-play-pause[amplitude-main-play-pause=\"true\"]');\n\n\t\t/*\n  \tIterate over all of the play pause elements syncing the\n  \tdisplay visually.\n  */\n\t\tfor (var i = 0; i < playPauseElements.length; i++) {\n\t\t\t/*\n   \tDetermines what classes we should add and remove\n   \tfrom the elements.\n   */\n\t\t\tswitch (state) {\n\t\t\t\tcase 'playing':\n\t\t\t\t\t_helpers2.default.setElementPlay(playPauseElements[i]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'paused':\n\t\t\t\t\t_helpers2.default.setElementPause(playPauseElements[i]);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSyncs the main playlist play pause buttons to the state of the active song.\n \t\n \t@param string playlist The playlist we are setting the play pause state\n \tfor.\n \t\t@param string state Either playing or paused for the state of the\n \tactive song.\n --------------------------------------------------------------------------*/\n\tfunction syncPlaylistPlayPause(playlist, state) {\n\n\t\tif (typeof state != \"string\") state = _config2.default.active_song.paused ? \"paused\" : \"playing\";\n\t\t/*\n  \tGet all of the main playlist play pause elements\n  */\n\t\tvar playlistPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[amplitude-playlist-main-play-pause=\"true\"]');\n\n\t\t/*\n  \tIterate over the play pause elements, syncing the state accordingly.\n  */\n\t\tfor (var i = 0; i < playlistPlayPauseElements.length; i++) {\n\t\t\t/*\n   \tIf the element has the same playlist attribute as the playlist\n   \tpassed in and the state is playing, we set the element to\n   \tbe playing otherwise we set it to pause. Setting to pause\n   \tmeans the element doesn't match the active playlist or the\n   \tstate is paused.\n   */\n\t\t\tif (playlistPlayPauseElements[i].getAttribute('amplitude-playlist') == playlist && state == 'playing') {\n\n\t\t\t\t_helpers2.default.setElementPlay(playlistPlayPauseElements[i]);\n\t\t\t} else {\n\t\t\t\t_helpers2.default.setElementPause(playlistPlayPauseElements[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSyncs the song play pause buttons to the state of the active song.\n \t\n \t@param string playlist The playlist we are setting the play pause state\n \tfor.\n \t\t@param int song The index of the song we are syncing the state for\n \t\n \t@param string state Either playing or paused for the state of the\n \tactive song.\n --------------------------------------------------------------------------*/\n\tfunction syncSongPlayPause(playlist, song, state) {\n\n\t\tif (typeof state != \"string\") state = _config2.default.active_song.paused ? \"paused\" : \"playing\";\n\n\t\t/*\n  \tIf the playlist is null or empty, we make sure that any song\n  \tthat is a part of a playlist is set to paused.\n  */\n\t\tif (playlist == null || playlist == '') {\n\t\t\t/*\n   \tGet all of the individual song play pause buttons. These have an\n   \tamplitude-song-index attribute. Some have amplitude-playlist which\n   \tmeans they are individual songs within a playlist.\n   */\n\t\t\tvar songPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[amplitude-song-index]');\n\n\t\t\t/*\n   \tIterate over all of the song play pause elements\n   */\n\t\t\tfor (var i = 0; i < songPlayPauseElements.length; i++) {\n\t\t\t\t/*\n    \tIf the song element has an attribute for amplitude-playlist then\n    \twe set it to paused no matter what because the state of the player\n    \tis not in a playlist mode.\n    */\n\t\t\t\tif (songPlayPauseElements[i].hasAttribute('amplitude-playlist')) {\n\t\t\t\t\t_helpers2.default.setElementPause(songPlayPauseElements[i]);\n\t\t\t\t} else {\n\t\t\t\t\t/*\n     \tIf the state of the song is playing and the song index matches the\n     \tindex of the song we have, we set the element to playing otherwise\n     \twe set the element to paused.\n     */\n\t\t\t\t\tif (state == 'playing' && songPlayPauseElements[i].getAttribute('amplitude-song-index') == song) {\n\t\t\t\t\t\t_helpers2.default.setElementPlay(songPlayPauseElements[i]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_helpers2.default.setElementPause(songPlayPauseElements[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n   \tGet all of the individual song play pause buttons. These have an\n   \tamplitude-song-index attribute. Some have amplitude-playlist which\n   \tmeans they are individual songs within a playlist.\n   */\n\t\t\tvar songPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[amplitude-song-index]');\n\n\t\t\t/*\n   \tIterate over all of the individual play pause elements.\n   */\n\t\t\tfor (var i = 0; i < songPlayPauseElements.length; i++) {\n\t\t\t\t/*\n    \tSince we have an active playlist this time, we want any stand alone\n    \tsongs to be set to paused since the scope is within a playlist.\n    \t\tWe check to see if the element has an amplitude-playlist attribute.\n    */\n\t\t\t\tif (songPlayPauseElements[i].hasAttribute('amplitude-playlist')) {\n\n\t\t\t\t\t/*\n     \tCheck to see if the song index matches the index passed in and the\n     \tplaylist matches the scoped playlist we are looking for and the\n     \tstate of the player is playing, then we set the element to play. If those\n     \tthree parameters are not met, set the element to pause.\n     */\n\t\t\t\t\tif (songPlayPauseElements[i].getAttribute('amplitude-song-index') == song && songPlayPauseElements[i].getAttribute('amplitude-playlist') == playlist && state == 'playing') {\n\t\t\t\t\t\t_helpers2.default.setElementPlay(songPlayPauseElements[i]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_helpers2.default.setElementPause(songPlayPauseElements[i]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/*\n     \tSet any individual songs (songs outside of a playlist scope) to pause\n     \tsince we are in the scope of a playlist.\n     */\n\t\t\t\t\t_helpers2.default.setElementPause(songPlayPauseElements[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSyncs repeat for all of the repeat buttons. Users\n \tcan apply styles to the 'amplitude-repeat-on' and \n \t'amplitude-repeat-off' classes. They represent the state\n \tof the player.\n --------------------------------------------------------------------------*/\n\tfunction syncRepeat() {\n\t\t/*\n  \tGets all of the repeat classes\n  */\n\t\tvar repeatClasses = document.getElementsByClassName(\"amplitude-repeat\");\n\n\t\t/*\n  \tIterate over all of the repeat classes. If repeat is on,\n  \tthen add the 'amplitude-repeat-on' class and remove the\n  \t'amplitude-repeat-off' class. If it's off, then do the\n  \topposite.\n  */\n\t\tfor (var i = 0; i < repeatClasses.length; i++) {\n\t\t\tif (_config2.default.repeat) {\n\t\t\t\trepeatClasses[i].classList.add('amplitude-repeat-on');\n\t\t\t\trepeatClasses[i].classList.remove('amplitude-repeat-off');\n\t\t\t} else {\n\t\t\t\trepeatClasses[i].classList.remove('amplitude-repeat-on');\n\t\t\t\trepeatClasses[i].classList.add('amplitude-repeat-off');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSyncs mute for all of the mute buttons. This represents the\n \tstate of the player if it's muted or not.\n \t\t@param \tstring\tstate The muted state of the player.\n --------------------------------------------------------------------------*/\n\tfunction syncMute(state) {\n\t\t/*\n  \tGet all of the mute buttons.\n  */\n\t\tvar muteClasses = document.getElementsByClassName(\"amplitude-mute\");\n\n\t\t/*\n  \tIterate over all of the mute classes. If the state of the player\n  \tis not-muted then we add the amplitude-not-muted classe and remove\n  \tthe amplitude muted class otherwise we do the opposite.\n  */\n\t\tfor (var i = 0; i < muteClasses.length; i++) {\n\t\t\tif (!state) {\n\t\t\t\tmuteClasses[i].classList.add('amplitude-not-muted');\n\t\t\t\tmuteClasses[i].classList.remove('amplitude-muted');\n\t\t\t} else {\n\t\t\t\tmuteClasses[i].classList.remove('amplitude-not-muted');\n\t\t\t\tmuteClasses[i].classList.add('amplitude-muted');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \t@param \tstring\tstate\n --------------------------------------------------------------------------*/\n\tfunction syncVolumeSliders(volume) {}\n\n\t/*--------------------------------------------------------------------------\n \tSyncs the global shuffle button visual state.\n \t\t@param \tbool state The shuffled state of the player.\n --------------------------------------------------------------------------*/\n\tfunction syncShuffle(state) {\n\t\t/*\n  \tGets the shuffle buttons.\n  */\n\t\tvar shuffleButtons = document.getElementsByClassName(\"amplitude-shuffle\");\n\n\t\t/*\n  \tIterate over all of the shuffle buttons.\n  */\n\t\tfor (var i = 0; i < shuffleButtons.length; i++) {\n\t\t\t/*\n   \tEnsure the shuffle button doesn't belong to a playlist. We have\n   \ta separate method for that.\n   */\n\t\t\tif (shuffleButtons[i].getAttribute('amplitude-playlist') == null) {\n\t\t\t\t/*\n    \tIf the state of the player is shuffled on, true, then\n    \twe add the 'amplitude-shuffle-on' class and remove the\n    \t'amplitude-shuffle-off' class. If the player is not shuffled\n    \tthen we do the opposite.\n    */\n\t\t\t\tif (state) {\n\t\t\t\t\tshuffleButtons[i].classList.add('amplitude-shuffle-on');\n\t\t\t\t\tshuffleButtons[i].classList.remove('amplitude-shuffle-off');\n\t\t\t\t} else {\n\t\t\t\t\tshuffleButtons[i].classList.add('amplitude-shuffle-off');\n\t\t\t\t\tshuffleButtons[i].classList.remove('amplitude-shuffle-on');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSyncs the playlist shuffle button visual state.\n \t\t@param \tbool state The shuffled state of the player.\n \t@param \tstring\tplaylist The playlist string the shuffle button belongs to.\n --------------------------------------------------------------------------*/\n\tfunction syncPlaylistShuffle(state, playlist) {\n\t\t/*\n  \tGets all of the shuffle buttons.\n  */\n\t\tvar shuffleButtons = document.getElementsByClassName(\"amplitude-shuffle\");\n\n\t\t/*\n  \tIterate over all of the shuffle buttons\n  */\n\t\tfor (var i = 0; i < shuffleButtons.length; i++) {\n\t\t\t/*\n   \tEnsure that the playlist the shuffle button belongs to matches the\n   \tplaylist we are syncing the state for.\n   */\n\t\t\tif (shuffleButtons[i].getAttribute('amplitude-playlist') == playlist) {\n\t\t\t\t/*\n    \tIf the state of the playlist is shuffled on, true, then\n    \twe add the 'amplitude-shuffle-on' class and remove the\n    \t'amplitude-shuffle-off' class. If the player is not shuffled\n    \tthen we do the opposite.\n    */\n\t\t\t\tif (state) {\n\t\t\t\t\tshuffleButtons[i].classList.add('amplitude-shuffle-on');\n\t\t\t\t\tshuffleButtons[i].classList.remove('amplitude-shuffle-off');\n\t\t\t\t} else {\n\t\t\t\t\tshuffleButtons[i].classList.add('amplitude-shuffle-off');\n\t\t\t\t\tshuffleButtons[i].classList.remove('amplitude-shuffle-on');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSyncs the main slider location\n \t\t@param \tint \tlocation The location of the song as a percentage.\n --------------------------------------------------------------------------*/\n\tfunction syncMainSliderLocation(location) {\n\t\t/*\n  \tEnsure we have a location that's a number\n  */\n\t\tlocation = !isNaN(location) ? location : 0;\n\n\t\t/*\n  \tGets the main song sliders\n  */\n\t\tvar mainSongSliders = document.querySelectorAll('.amplitude-song-slider[amplitude-main-song-slider=\"true\"]');\n\n\t\t/*\n  \tIterates over all of the main sliders and sets the value to the\n  \tpercentage of the song played.\n  */\n\t\tfor (var i = 0; i < mainSongSliders.length; i++) {\n\t\t\tmainSongSliders[i].value = location;\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSyncs playlist song slider locations\n \t\n \t@param \tstring\tplaylist The playlist we are setting the song slider for.\n \t@param \tint \tlocation The location of the song as a percentage.\n --------------------------------------------------------------------------*/\n\tfunction syncPlaylistSliderLocation(playlist, location) {\n\t\t/*\n  \tEnsure we have a location that's a number\n  */\n\t\tlocation = !isNaN(location) ? location : 0;\n\n\t\t/*\n  \tGets the playlist song sliders\n  */\n\t\tvar playlistSongSliders = document.querySelectorAll('.amplitude-song-slider[amplitude-playlist-song-slider=\"true\"][amplitude-playlist=\"' + playlist + '\"]');\n\n\t\t/*\n  \tIterates over all of the playlist sliders and sets the value to the\n  \tpercentage of the song played.\n  */\n\t\tfor (var i = 0; i < playlistSongSliders.length; i++) {\n\t\t\tplaylistSongSliders[i].value = location;\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSyncs individual song slider locations\n \t\n \t@param \tstring\tplaylist The playlist we are setting the song slider for.\n \t@param \tint \tsongIndex The index of the song we are adjusting the song slider for.\n \t@param \tint \tlocation The location of the song as a percentage.\n --------------------------------------------------------------------------*/\n\tfunction syncSongSliderLocation(playlist, songIndex, location) {\n\t\t/*\n  \tEnsure we have a location that's a number\n  */\n\t\tlocation = !isNaN(location) ? location : 0;\n\t\t/*\n  \tIf the playlist is set, we get all of the individual song sliders\n  \tthat relate to the song and the playlist.\n  */\n\t\tif (playlist != '' && playlist != null) {\n\t\t\t/*\n   \tGets the song sliders for the individual songs and the\n   \tplaylist\n   */\n\t\t\tvar songSliders = document.querySelectorAll('.amplitude-song-slider[amplitude-playlist=\"' + playlist + '\"][amplitude-song-index=\"' + songIndex + '\"]');\n\n\t\t\t/*\n   \tIterates over all of the playlist sliders and set the value to the\n   \tpercentage of the song played.\n   */\n\t\t\tfor (var i = 0; i < songSliders.length; i++) {\n\t\t\t\tsongSliders[i].value = location;\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n   \tGet the individual song slider by index\n   */\n\t\t\tvar songSliders = document.querySelectorAll('.amplitude-song-slider[amplitude-song-index=\"' + songIndex + '\"]');\n\n\t\t\t/*\n   \tIterats over all of the song sliders that have the index of\n   \tthe song we are sliding. If the song doesn't have a playlist\n   \tattribute, we set the location.\n   */\n\t\t\tfor (var i = 0; i < songSliders.length; i++) {\n\t\t\t\tif (!songSliders[i].hasAttribute('amplitude-playlist')) {\n\t\t\t\t\tif (location != 0) {\n\t\t\t\t\t\tsongSliders[i].value = location;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the volume slider location\n \t\n \t@param \tint volume The volume from 0 - 1 for song volume.\n --------------------------------------------------------------------------*/\n\tfunction syncVolumeSliderLocation(volume) {\n\t\t/*\n  \tGets all of the volume sliders\n  */\n\t\tvar volumeSliders = document.querySelectorAll('.amplitude-volume-slider');\n\n\t\t/*\n  \tIterates over all of the sliders and sets their volume\n  \tto the volume of the song.\n  */\n\t\tfor (var i = 0; i < volumeSliders.length; i++) {\n\t\t\tvolumeSliders[i].value = volume;\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSyncs the song's duration\n \t\t@param \tsongDuration \tObject containing information about the duration\n \t\tof the song\n --------------------------------------------------------------------------*/\n\tfunction syncSongDuration(songDuration) {\n\t\t/*\n  \tSet duration hour display.\n  */\n\t\t_helpers2.default.syncDurationHours(songDuration != undefined && !isNaN(songDuration.hours) ? songDuration.hours : '00');\n\n\t\t/*\n  \tSet duration minute display.\n  */\n\t\t_helpers2.default.syncDurationMinutes(songDuration != undefined && !isNaN(songDuration.minutes) ? songDuration.minutes : '00');\n\n\t\t/*\n  \tSet duration second display.\n  */\n\t\t_helpers2.default.syncDurationSeconds(songDuration != undefined && !isNaN(songDuration.seconds) ? songDuration.seconds : '00');\n\n\t\t/*\n  \tSet duration time display.\n  */\n\t\t_helpers2.default.syncDurationTime(songDuration != undefined ? songDuration : {});\n\t}\n\n\t/*\n \tReturns the publically available functions\n */\n\treturn _ref = {\n\t\tsyncCurrentTime: syncCurrentTime,\n\t\tresetTimes: resetTimes,\n\t\tresetSongSliders: resetSongSliders,\n\t\tresetSongTimeVisualizations: resetSongTimeVisualizations,\n\t\tsetActiveContainer: setActiveContainer,\n\t\tdisplaySongMetadata: displaySongMetadata,\n\t\tsyncPlaybackSpeed: syncPlaybackSpeed,\n\t\tsyncVolumeSliders: syncVolumeSliders,\n\t\tsetPlayPauseButtonsToPause: setPlayPauseButtonsToPause,\n\t\tsetFirstSongInPlaylist: setFirstSongInPlaylist,\n\t\tsyncMainPlayPause: syncMainPlayPause,\n\t\tsyncPlaylistPlayPause: syncPlaylistPlayPause,\n\t\tsyncSongPlayPause: syncSongPlayPause,\n\t\tsyncRepeat: syncRepeat,\n\t\tsyncMute: syncMute\n\t}, _defineProperty(_ref, 'syncVolumeSliders', syncVolumeSliders), _defineProperty(_ref, 'syncShuffle', syncShuffle), _defineProperty(_ref, 'syncPlaylistShuffle', syncPlaylistShuffle), _defineProperty(_ref, 'syncMainSliderLocation', syncMainSliderLocation), _defineProperty(_ref, 'syncPlaylistSliderLocation', syncPlaylistSliderLocation), _defineProperty(_ref, 'syncSongSliderLocation', syncSongSliderLocation), _defineProperty(_ref, 'syncVolumeSliderLocation', syncVolumeSliderLocation), _defineProperty(_ref, 'syncSongDuration', syncSongDuration), _ref;\n}();\n\nexports.default = AmplitudeVisualSync;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _helpers = __webpack_require__(1);\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _visual = __webpack_require__(2);\n\nvar _visual2 = _interopRequireDefault(_visual);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n|----------------------------------------------------------------------------------------------------\n| CORE FUNCTIONAL METHODS\n|----------------------------------------------------------------------------------------------------\n| Interacts directly with native functions of the Audio element. Logic\n| leading up to these methods are handled by click handlers which call\n| helpers and visual synchronizers. These are the core functions of AmplitudeJS.\n| Every other function that leads to these prepare the information to be \n| acted upon by these functions.\n|\n| METHODS\n|\tplay()\n|\tpause()\n|\tstop()\n|\tsetVolume( volumeLevel )\n|\tsetSongLocation( songPercentage )\n|\tdisconnectStream()\n|\treconnectStream()\n|\tplayNow()\n| \tsetPlaybackSpeed()\n*/\nvar AmplitudeCore = function () {\n\t/*--------------------------------------------------------------------------\n \tPlays the active song. If the current song is live, it reconnects\n \tthe stream before playing.\n --------------------------------------------------------------------------*/\n\tfunction play() {\n\t\t/*\n  \tRun the before play callback\n  */\n\t\t_helpers2.default.runCallback('before_play');\n\n\t\t/*\n  \tIf the audio is live we re-conenct the stream.\n  */\n\t\tif (_config2.default.active_metadata.live) {\n\t\t\treconnectStream();\n\t\t}\n\n\t\t/*\n  \tMobile remote sources need to be reconnected on play. I think this is\n  \tbecause mobile browsers are optimized not to load all resources\n  \tfor speed reasons. We only do this if mobile and the paused button\n  \tis not clicked. If the pause button was clicked then we don't reconnect\n  \tor the user will lose their place in the stream.\n  */\n\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && !_config2.default.paused) {\n\t\t\treconnectStream();\n\t\t}\n\n\t\t/*\n  \tPlay the song and set the playback rate to the playback\n  \tspeed.\n  */\n\t\t_config2.default.active_song.play();\n\t\t_config2.default.active_song.playbackRate = _config2.default.playback_speed;\n\n\t\t/*\n  \tRun the after play callback\n  */\n\t\t_helpers2.default.runCallback('after_play');\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tPauses the active song. If it's live, it disconnects the stream.\n --------------------------------------------------------------------------*/\n\tfunction pause() {\n\t\t_helpers2.default.runCallback('before_pause');\n\t\t/*\n  \tPause the active song.\n  */\n\t\t_config2.default.active_song.pause();\n\n\t\t/*\n  \tFlag that pause button was clicked.\n  */\n\t\t_config2.default.paused = true;\n\n\t\tif (_config2.default.active_metadata.live) {\n\t\t\tdisconnectStream();\n\t\t}\n\t\t_helpers2.default.runCallback('after_pause');\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tStops the active song by setting the current song time to 0.\n \tWhen the user resumes, it will be from the beginning.\n \tIf it's a live stream it disconnects.\n --------------------------------------------------------------------------*/\n\tfunction stop() {\n\t\t_helpers2.default.runCallback('before_stop');\n\n\t\tif (_config2.default.active_song.currentTime != 0) {\n\t\t\t_config2.default.active_song.currentTime = 0;\n\t\t}\n\n\t\t_config2.default.active_song.pause();\n\n\t\tif (_config2.default.active_metadata.live) {\n\t\t\tdisconnectStream();\n\t\t}\n\n\t\t_helpers2.default.runCallback('after_stop');\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the song volume.\n \t\t@param int volumeLevel A number between 1 and 100 as a percentage of\n \tmin to max for a volume level.\n --------------------------------------------------------------------------*/\n\tfunction setVolume(volumeLevel) {\n\t\t_config2.default.active_song.volume = volumeLevel / 100;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the song percentage. If it's a live song, we ignore this because\n \twe can't skip ahead. This is an issue if you have a playlist with \n \ta live source.\n \t\t@param int songPercentage A number between 1 and 100 as a percentage of\n \tsong completion.\n --------------------------------------------------------------------------*/\n\tfunction setSongLocation(songPercentage) {\n\t\tif (!_config2.default.active_metadata.live) {\n\t\t\t_config2.default.active_song.currentTime = _config2.default.active_song.duration * (song_percentage / 100);\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSkips to a location in a song\n \t\t@param int seconds An integer containing the seconds to skip to\n --------------------------------------------------------------------------*/\n\tfunction skipToLocation(seconds) {\n\t\t/*\n  \tWhen the active song can be played through, we can check to\n  \tsee if the seconds will work. We only bind the event handler\n  \tonce and remove it once it's fired.\n  */\n\t\t_config2.default.active_song.addEventListener('canplaythrough', function () {\n\t\t\t/*\n   \tIf the active song duration is greater than or equal to the\n   \tamount of seconds the user wants to skip to and the seconds\n   \tis greater than 0, we skip to the seconds defined.\n   */\n\t\t\tif (_config2.default.active_song.duration >= seconds && seconds > 0) {\n\t\t\t\t_config2.default.active_song.currentTime = seconds;\n\t\t\t} else {\n\t\t\t\t_helpers2.default.writeDebugMessage('Amplitude can\\'t skip to a location greater than the duration of the audio or less than 0');\n\t\t\t}\n\t\t}, { once: true });\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tDisconnects the live stream\n --------------------------------------------------------------------------*/\n\tfunction disconnectStream() {\n\t\t_config2.default.active_song.src = '';\n\t\t_config2.default.active_song.load();\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tReconnects the live stream\n --------------------------------------------------------------------------*/\n\tfunction reconnectStream() {\n\t\t_config2.default.active_song.src = _config2.default.active_metadata.url;\n\t\t_config2.default.active_song.load();\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tWhen you pass a song object it plays that song right awawy.  It sets\n \tthe active song in the config to the song you pass in and synchronizes\n \tthe visuals.\n \t\n \tPublic Accessor: Amplitude.playNow( song_json )\n \t\t@param song JSON representation of a song.\n --------------------------------------------------------------------------*/\n\tfunction playNow(song) {\n\t\t/*\n  \tMakes sure the song object has a URL associated with it\n  \tor there will be nothing to play.\n  */\n\t\tif (song.url) {\n\t\t\t_config2.default.active_song.src = song.url;\n\t\t\t_config2.default.active_metadata = song;\n\t\t\t_config2.default.active_album = song.album;\n\t\t} else {\n\t\t\t/*\n   \tWrite error message since the song passed in doesn't\n   \thave a URL.\n   */\n\t\t\t_helpers2.default.writeDebugMessage('The song needs to have a URL!');\n\t\t}\n\n\t\t/*\n  \tSets the main song control status visual\n  */\n\t\t_visual2.default.syncMainPlayPause('playing');\n\n\t\t/*\n  \tUpdate the song meta data\n  */\n\t\t_visual2.default.displaySongMetadata();\n\n\t\t/*\n  \tReset the song sliders, song time visualizations, and\n  \treset times. This ensures everything stays in sync.\n  */\n\t\t_visual2.default.resetSongSliders();\n\t\t_visual2.default.resetSongTimeVisualizations();\n\t\t_visual2.default.resetTimes();\n\n\t\t/*\n  \tPlays the song.\n  */\n\t\tplay();\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the playback speed for the song.\n \t\t@param float playbackSpeed The speed we want the song to play back at.\n --------------------------------------------------------------------------*/\n\tfunction setPlaybackSpeed(playbackSpeed) {\n\t\t/*\n  \tSet the config playback speed.\n  */\n\t\t_config2.default.playback_speed = playbackSpeed;\n\n\t\t/*\n  \tSet the active song playback rate.\n  */\n\t\t_config2.default.active_song.playbackRate = _config2.default.playback_speed;\n\t}\n\n\t/*\n \tReturn publically facing functions\n */\n\treturn {\n\t\tplay: play,\n\t\tpause: pause,\n\t\tstop: stop,\n\t\tsetVolume: setVolume,\n\t\tsetSongLocation: setSongLocation,\n\t\tskipToLocation: skipToLocation,\n\t\tdisconnectStream: disconnectStream,\n\t\treconnectStream: reconnectStream,\n\t\tplayNow: playNow,\n\t\tsetPlaybackSpeed: setPlaybackSpeed\n\t};\n}();\n\nexports.default = AmplitudeCore;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _helpers = __webpack_require__(1);\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _handlers = __webpack_require__(7);\n\nvar _handlers2 = _interopRequireDefault(_handlers);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n|----------------------------------------------------------------------------------------------------\n| EVENTS METHODS\n|----------------------------------------------------------------------------------------------------\n| These methods are called when we need to bind events to certain elements.\n|\n| METHODS:\n| \tinitializeEvents()\n|\tbindPlay()\n|\tbindPause()\n|\tbindPlayPause()\n|\tbindStop()\n|\tbindMute()\n|\tbindVolumeUp()\n|\tbindVolumeDown()\n|\tbindSongSlider()\n|\tbindVolumeSlider()\n|\tbindNext()\n|\tbindPrev()\n|\tbindShuffle()\n|\tbindRepeat()\n|\tbindPlaybackSpeed()\n|\tbindSkipTo()\n*/\nvar AmplitudeEvents = function () {\n\t/*--------------------------------------------------------------------------\n \tInitializes the handlers for the events listened to by Amplitude\n --------------------------------------------------------------------------*/\n\tfunction initializeEvents() {\n\t\t/*\n  \tWrite out debug message\n  */\n\t\t_helpers2.default.writeDebugMessage('Beginning initialization of event handlers..');\n\n\t\t/*\n  \tSets flag that the screen is moving and not a tap\n  */\n\t\tdocument.addEventListener('touchmove', function () {\n\t\t\t_config2.default.is_touch_moving = true;\n\t\t});\n\n\t\t/*\n  \tOn touch end if it was a touch move event, set moving to\n  \tfalse\n  */\n\t\tdocument.addEventListener('touchend', function () {\n\t\t\tif (_config2.default.is_touch_moving) {\n\t\t\t\t_config2.default.is_touch_moving = false;\n\t\t\t}\n\t\t});\n\n\t\t/*\n  \tOn time update for the audio element, update visual displays that\n  \trepresent the time on either a visualized element or time display.\n  */\n\t\tbindTimeUpdate();\n\n\t\t/*\n  \tWhen the audio element has ended playing, we handle the song\n  \tending. In a single song or multiple modular song instance,\n  \tthis just synchronizes the visuals for time and song time\n  \tvisualization, but for a playlist it determines whether\n  \tit should play the next song or not.\n  */\n\t\tbindSongEnded();\n\n\t\t/*\n  \tBinds 'amplitude-play' event handlers\n  */\n\t\tbindPlay();\n\n\t\t/*\n  \tBinds 'amplitude-pause' event handlers.\n  */\n\t\tbindPause();\n\n\t\t/*\n  \tBinds 'amplitude-play-pause' event handlers.\n  */\n\t\tbindPlayPause();\n\n\t\t/*\n  \tBinds 'amplitude-stop' event handlers.\n  */\n\t\tbindStop();\n\n\t\t/*\n  \tBinds 'amplitude-mute' event handlers.\n  */\n\t\tbindMute();\n\n\t\t/*\n  \tBinds 'amplitude-volume-up' event handlers\n  */\n\t\tbindVolumeUp();\n\n\t\t/*\n  \tBinds 'amplitude-volume-down' event handlers\n  */\n\t\tbindVolumeDown();\n\n\t\t/*\n  \tBinds 'amplitude-song-slider' event handlers\n  */\n\t\tbindSongSlider();\n\n\t\t/*\n  \tBinds 'amplitude-volume-slider' event handlers.\n  */\n\t\tbindVolumeSlider();\n\n\t\t/*\n  \tBinds 'amplitude-next' event handlers.\n  */\n\t\tbindNext();\n\n\t\t/*\n  \tBinds 'amplitude-prev' event handlers.\n  */\n\t\tbindPrev();\n\n\t\t/*\n  \tBinds 'amplitude-shuffle' event handlers.\n  */\n\t\tbindShuffle();\n\n\t\t/*\n  \tBinds 'amplitude-repeat' event handlers.\n  */\n\t\tbindRepeat();\n\n\t\t/*\n  \tBinds 'amplitude-playback-speed' event handlers.\n  */\n\t\tbindPlaybackSpeed();\n\n\t\t/*\n  \tBinds 'amplitude-skip-to' event handlers.\n  */\n\t\tbindSkipTo();\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tOn time update for the audio element, update visual displays that\n \t\trepresent the time on either a visualized element or time display.\n --------------------------------------------------------------------------*/\n\tfunction bindTimeUpdate() {\n\t\t_config2.default.active_song.removeEventListener('timeupdate', _handlers2.default.updateTime);\n\t\t_config2.default.active_song.addEventListener('timeupdate', _handlers2.default.updateTime);\n\n\t\t// also bind change of duratuion\n\t\t_config2.default.active_song.removeEventListener('durationchange', _handlers2.default.updateTime);\n\t\t_config2.default.active_song.addEventListener('durationchange', _handlers2.default.updateTime);\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tWhen the audio element has ended playing, we handle the song\n \tending. In a single song or multiple modular song instance,\n \tthis just synchronizes the visuals for time and song time\n \tvisualization, but for a playlist it determines whether\n \tit should play the next song or not.\n --------------------------------------------------------------------------*/\n\tfunction bindSongEnded() {\n\t\t_config2.default.active_song.removeEventListener('ended', _handlers2.default.songEnded);\n\t\t_config2.default.active_song.addEventListener('ended', _handlers2.default.songEnded);\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-play\"\n \t\tBinds click and touchend events for amplitude play buttons.\n --------------------------------------------------------------------------*/\n\tfunction bindPlay() {\n\t\t/*\n  \tGets all of the elements with the class amplitude-play\n  */\n\t\tvar play_classes = document.getElementsByClassName(\"amplitude-play\");\n\n\t\t/*\n  \tIterates over all of the play classes and binds the event interaction\n  \tmethod to the element. If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < play_classes.length; i++) {\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\tplay_classes[i].removeEventListener('touchend', _handlers2.default.play);\n\t\t\t\tplay_classes[i].addEventListener('touchend', _handlers2.default.play);\n\t\t\t} else {\n\t\t\t\tplay_classes[i].removeEventListener('click', _handlers2.default.play);\n\t\t\t\tplay_classes[i].addEventListener('click', _handlers2.default.play);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-pause\"\n \t\tBinds click and touchend events for amplitude pause buttons.\n --------------------------------------------------------------------------*/\n\tfunction bindPause() {\n\t\t/*\n  \tGets all of the elements with the class amplitude-pause\n  */\n\t\tvar pause_classes = document.getElementsByClassName(\"amplitude-pause\");\n\n\t\t/*\n  \tIterates over all of the pause classes and binds the event interaction\n  \tmethod to the element. If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < pause_classes.length; i++) {\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\tpause_classes[i].removeEventListener('touchend', _handlers2.default.pause);\n\t\t\t\tpause_classes[i].addEventListener('touchend', _handlers2.default.pause);\n\t\t\t} else {\n\t\t\t\tpause_classes[i].removeEventListener('click', _handlers2.default.pause);\n\t\t\t\tpause_classes[i].addEventListener('click', _handlers2.default.pause);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-play-pause\"\n \t\n \tBinds click and touchend events for amplitude play pause buttons.\n --------------------------------------------------------------------------*/\n\tfunction bindPlayPause() {\n\t\t/*\n  \tGets all of the elements with the class amplitude-play-pause\n  */\n\t\tvar play_pause_classes = document.getElementsByClassName(\"amplitude-play-pause\");\n\n\t\t/*\n  \tIterates over all of the play/pause classes and binds the event interaction\n  \tmethod to the element. If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < play_pause_classes.length; i++) {\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\tplay_pause_classes[i].removeEventListener('touchend', _handlers2.default.playPause);\n\t\t\t\tplay_pause_classes[i].addEventListener('touchend', _handlers2.default.playPause);\n\t\t\t} else {\n\t\t\t\tplay_pause_classes[i].removeEventListener('click', _handlers2.default.playPause);\n\t\t\t\tplay_pause_classes[i].addEventListener('click', _handlers2.default.playPause);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-stop\"\n \t\tBinds click and touchend events for amplitude stop buttons\n --------------------------------------------------------------------------*/\n\tfunction bindStop() {\n\t\t/*\n  \tGets all of the elements with the class amplitude-stop\n  */\n\t\tvar stop_classes = document.getElementsByClassName(\"amplitude-stop\");\n\n\t\t/*\n  \tIterates over all of the stop classes and binds the event interaction\n  \tmethod to the element.  If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < stop_classes.length; i++) {\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\tstop_classes[i].removeEventListener('touchend', _handlers2.default.stop);\n\t\t\t\tstop_classes[i].addEventListener('touchend', _handlers2.default.stop);\n\t\t\t} else {\n\t\t\t\tstop_classes[i].removeEventListener('click', _handlers2.default.stop);\n\t\t\t\tstop_classes[i].addEventListener('click', _handlers2.default.stop);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-mute\"\n \t\tBinds click and touchend events for amplitude mute buttons\n --------------------------------------------------------------------------*/\n\tfunction bindMute() {\n\t\t/*\n  \tGets all of the elements with the class amplitue-mute\t\t\t\n  */\n\t\tvar mute_classes = document.getElementsByClassName(\"amplitude-mute\");\n\n\t\t/*\n  \tIterates over all of the mute classes and binds the event interaction\n  \tmethod to the element. If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < mute_classes.length; i++) {\n\t\t\t/*\n   \tWARNING: If iOS, we don't do anything because iOS does not allow the\n   \tvolume to be adjusted through anything except the buttons on the side of\n   \tthe device.\n   */\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\t/*\n    \tChecks for an iOS device and displays an error message if debugging\n    \tis turned on.\n    */\n\t\t\t\tif (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n\t\t\t\t\t_helpers2.default.writeDebugMessage('iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4');\n\t\t\t\t} else {\n\t\t\t\t\tmute_classes[i].removeEventListener('touchend', _handlers2.default.mute);\n\t\t\t\t\tmute_classes[i].addEventListener('touchend', _handlers2.default.mute);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmute_classes[i].removeEventListener('click', _handlers2.default.mute);\n\t\t\t\tmute_classes[i].addEventListener('click', _handlers2.default.mute);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-volume-up\"\n \t\tBinds click and touchend events for amplitude volume up buttons\n --------------------------------------------------------------------------*/\n\tfunction bindVolumeUp() {\n\t\t/*\n  \tGets all of the elements with the class amplitude-volume-up\t\t\t\n  */\n\t\tvar volume_up_classes = document.getElementsByClassName(\"amplitude-volume-up\");\n\n\t\t/*\n  \tIterates over all of the volume up classes and binds the event interaction\n  \tmethods to the element. If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < volume_up_classes.length; i++) {\n\t\t\t/*\n   \tWARNING: If iOS, we don't do anything because iOS does not allow the\n   \tvolume to be adjusted through anything except the buttons on the side of\n   \tthe device.\n   */\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\t/*\n    \tChecks for an iOS device and displays an error message if debugging\n    \tis turned on.\n    */\n\t\t\t\tif (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n\t\t\t\t\t_helpers2.default.writeDebugMessage('iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4');\n\t\t\t\t} else {\n\t\t\t\t\tvolume_up_classes[i].removeEventListener('touchend', _handlers2.default.volumeUp);\n\t\t\t\t\tvolume_up_classes[i].addEventListener('touchend', _handlers2.default.volumeUp);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvolume_up_classes[i].removeEventListener('click', _handlers2.default.volumeUp);\n\t\t\t\tvolume_up_classes[i].addEventListener('click', _handlers2.default.volumeUp);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-volume-down\"\n \t\tBinds click and touchend events for amplitude volume down buttons\n --------------------------------------------------------------------------*/\n\tfunction bindVolumeDown() {\n\t\t/*\n  \tGets all of the elements with the class amplitude-volume-down\t\t\t\n  */\n\t\tvar volume_down_classes = document.getElementsByClassName(\"amplitude-volume-down\");\n\n\t\t/*\n  \tIterates over all of the volume down classes and binds the event interaction\n  \tmethods to the element. If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < volume_down_classes.length; i++) {\n\t\t\t/*\n   \tWARNING: If iOS, we don't do anything because iOS does not allow the\n   \tvolume to be adjusted through anything except the buttons on the side of\n   \tthe device.\n   */\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\t/*\n    \tChecks for an iOS device and displays an error message if debugging\n    \tis turned on.\n    */\n\t\t\t\tif (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n\t\t\t\t\t_helpers2.default.writeDebugMessage('iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4');\n\t\t\t\t} else {\n\t\t\t\t\tvolume_down_classes[i].removeEventListener('touchend', _handlers2.default.volumeDown);\n\t\t\t\t\tvolume_down_classes[i].addEventListener('touchend', _handlers2.default.volumeDown);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvolume_down_classes[i].removeEventListener('click', _handlers2.default.volumeDown);\n\t\t\t\tvolume_down_classes[i].addEventListener('click', _handlers2.default.volumeDown);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-song-slider\"\n \t\tBinds change and input events for amplitude song slider inputs\n --------------------------------------------------------------------------*/\n\tfunction bindSongSlider() {\n\t\t/*\n  \tGets browser so if we need to apply overrides, like we usually\n  \thave to do for anything cool in IE, we can do that.\n  */\n\t\tvar ua = window.navigator.userAgent;\n\t\tvar msie = ua.indexOf(\"MSIE \");\n\n\t\t/*\n  \tGets all of the elements with the class amplitude-song-slider\n  */\n\t\tvar song_sliders = document.getElementsByClassName(\"amplitude-song-slider\");\n\n\t\t/*\n  \tIterates over all of the song slider classes and binds the event interaction\n  \tmethods to the element. If the browser is IE we listen to the change event\n  \twhere if it is anything else, it's the input method.\n  */\n\t\tfor (var i = 0; i < song_sliders.length; i++) {\n\t\t\tif (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) {\n\t\t\t\tsong_sliders[i].removeEventListener('change', _handlers2.default.songSlider);\n\t\t\t\tsong_sliders[i].addEventListener('change', _handlers2.default.songSlider);\n\t\t\t} else {\n\t\t\t\tsong_sliders[i].removeEventListener('input', _handlers2.default.songSlider);\n\t\t\t\tsong_sliders[i].addEventListener('input', _handlers2.default.songSlider);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-volume-slider\"\n \t\tBinds change and input events for amplitude volume slider inputs\n --------------------------------------------------------------------------*/\n\tfunction bindVolumeSlider() {\n\t\t/*\n  \tGets browser so if we need to apply overrides, like we usually\n  \thave to do for anything cool in IE, we can do that.\n  */\n\t\tvar ua = window.navigator.userAgent;\n\t\tvar msie = ua.indexOf(\"MSIE \");\n\n\t\t/*\n  Gets all of the elements with the class amplitude-volume-slider\n  */\n\t\tvar volume_sliders = document.getElementsByClassName(\"amplitude-volume-slider\");\n\n\t\t/*\n  \tIterates over all of the volume slider classes and binds the event interaction\n  \tmethods to the element. If the browser is IE we listen to the change event\n  \twhere if it is anything else, it's the input method.\n  */\n\t\tfor (var i = 0; i < volume_sliders.length; i++) {\n\t\t\t/*\n   \tWARNING: If iOS, we don't do anything because iOS does not allow the\n   \tvolume to be adjusted through anything except the buttons on the side of\n   \tthe device.\n   */\n\t\t\tif (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n\t\t\t\t_helpers2.default.writeDebugMessage('iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4');\n\t\t\t} else {\n\t\t\t\tif (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) {\n\t\t\t\t\tvolume_sliders[i].removeEventListener('change', _handlers2.default.volumeSlider);\n\t\t\t\t\tvolume_sliders[i].addEventListener('change', _handlers2.default.volumeSlider);\n\t\t\t\t} else {\n\t\t\t\t\tvolume_sliders[i].removeEventListener('input', _handlers2.default.volumeSlider);\n\t\t\t\t\tvolume_sliders[i].addEventListener('input', _handlers2.default.volumeSlider);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-next\"\n \t\tBinds click and touchend events for amplitude next buttons.\n --------------------------------------------------------------------------*/\n\tfunction bindNext() {\n\t\t/*\n  \tGets all of the elements with the class amplitude-next\n        */\n\t\tvar next_classes = document.getElementsByClassName(\"amplitude-next\");\n\n\t\t/*\n  \tIterates over all of the next classes and binds the event interaction\n  \tmethods to the element. If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < next_classes.length; i++) {\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\tnext_classes[i].removeEventListener('touchend', _handlers2.default.next);\n\t\t\t\tnext_classes[i].addEventListener('touchend', _handlers2.default.next);\n\t\t\t} else {\n\t\t\t\tnext_classes[i].removeEventListener('click', _handlers2.default.next);\n\t\t\t\tnext_classes[i].addEventListener('click', _handlers2.default.next);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-prev\"\n \t\tBinds click and touchend events for amplitude prev buttons.\n --------------------------------------------------------------------------*/\n\tfunction bindPrev() {\n\t\t/*\n  \tGets all of the elements with the class amplitude-prev\n  */\n\t\tvar prev_classes = document.getElementsByClassName(\"amplitude-prev\");\n\n\t\t/*\n  \tIterates over all of the prev classes and binds the event interaction\n  \tmethods to the element. If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < prev_classes.length; i++) {\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\tprev_classes[i].removeEventListener('touchend', _handlers2.default.prev);\n\t\t\t\tprev_classes[i].addEventListener('touchend', _handlers2.default.prev);\n\t\t\t} else {\n\t\t\t\tprev_classes[i].removeEventListener('click', _handlers2.default.prev);\n\t\t\t\tprev_classes[i].addEventListener('click', _handlers2.default.prev);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-shuffle\"\n \t\tBinds click and touchend events for amplitude shuffle buttons.\n --------------------------------------------------------------------------*/\n\tfunction bindShuffle() {\n\t\t/*\n  \tGets all of the elements with the class amplitude-shuffle\n  */\n\t\tvar shuffle_classes = document.getElementsByClassName(\"amplitude-shuffle\");\n\n\t\t/*\n  \tIterates over all of the shuffle classes and binds the event interaction\n  \tmethods to the element. If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < shuffle_classes.length; i++) {\n\t\t\t/*\n   \tSince we are re-binding everything we remove any classes that signify \n   \ta state of the shuffle control.\n   */\n\t\t\tshuffle_classes[i].classList.remove('amplitude-shuffle-on');\n\t\t\tshuffle_classes[i].classList.add('amplitude-shuffle-off');\n\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\tshuffle_classes[i].removeEventListener('touchend', _handlers2.default.shuffle);\n\t\t\t\tshuffle_classes[i].addEventListener('touchend', _handlers2.default.shuffle);\n\t\t\t} else {\n\t\t\t\tshuffle_classes[i].removeEventListener('click', _handlers2.default.shuffle);\n\t\t\t\tshuffle_classes[i].addEventListener('click', _handlers2.default.shuffle);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-repeat\"\n \t\tBinds click and touchend events for amplitude repeat buttons.\n --------------------------------------------------------------------------*/\n\tfunction bindRepeat() {\n\t\t/*\n  \tGets all of the elements with the class amplitude-repeat\n  */\n\t\tvar repeat_classes = document.getElementsByClassName(\"amplitude-repeat\");\n\n\t\t/*\n  \tIterates over all of the repeat classes and binds the event interaction\n  \tmethods to the element. If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < repeat_classes.length; i++) {\n\t\t\t/*\n   \tSince we are re-binding everything we remove any classes that signify \n   \ta state of the repeat control.\n   */\n\t\t\trepeat_classes[i].classList.remove('amplitude-repeat-on');\n\t\t\trepeat_classes[i].classList.add('amplitude-repeat-off');\n\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\trepeat_classes[i].removeEventListener('touchend', _handlers2.default.repeat);\n\t\t\t\trepeat_classes[i].addEventListener('touchend', _handlers2.default.repeat);\n\t\t\t} else {\n\t\t\t\trepeat_classes[i].removeEventListener('click', _handlers2.default.repeat);\n\t\t\t\trepeat_classes[i].addEventListener('click', _handlers2.default.repeat);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-playback-speed\"\n \t\tBinds click and touchend events for amplitude playback speed buttons.\n --------------------------------------------------------------------------*/\n\tfunction bindPlaybackSpeed() {\n\t\t/*\n  \tGets all of the elements with the class amplitude-playback-speed\n  */\n\t\tvar playback_speed_classes = document.getElementsByClassName(\"amplitude-playback-speed\");\n\n\t\t/*\n  \tIterates over all of the playback speed classes and binds the event interaction\n  \tmethods to the element. If the browser is mobile, then the event is touchend\n  \totherwise it is click.\n  */\n\t\tfor (var i = 0; i < playback_speed_classes.length; i++) {\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\tplayback_speed_classes[i].removeEventListener('touchend', _handlers2.default.playbackSpeed);\n\t\t\t\tplayback_speed_classes[i].addEventListener('touchend', _handlers2.default.playbackSpeed);\n\t\t\t} else {\n\t\t\t\tplayback_speed_classes[i].removeEventListener('click', _handlers2.default.playbackSpeed);\n\t\t\t\tplayback_speed_classes[i].addEventListener('click', _handlers2.default.playbackSpeed);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBINDS: class=\"amplitude-skip-to\"\n \t\tBinds click and touchend events for amplitude skip to buttons.\n --------------------------------------------------------------------------*/\n\tfunction bindSkipTo() {\n\t\t/*\n  \tGets all of the skip to elements with the class 'amplitude-skip-to'\n  */\n\t\tvar skipToClasses = document.getElementsByClassName(\"amplitude-skip-to\");\n\n\t\t/*\n  \tIterates over all of the skip to classes and binds the event interaction\n  \tmethods to the element. If the browser is mobile, then the event is touchend\n  \totherwise it's a click.\n  */\n\t\tfor (var i = 0; i < skipToClasses.length; i++) {\n\t\t\tif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n\t\t\t\tskipToClasses[i].removeEventListener('touchend', _handlers2.default.skipTo);\n\t\t\t\tskipToClasses[i].addEventListener('touchend', _handlers2.default.skipTo);\n\t\t\t} else {\n\t\t\t\tskipToClasses[i].removeEventListener('click', _handlers2.default.skipTo);\n\t\t\t\tskipToClasses[i].addEventListener('click', _handlers2.default.skipTo);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tinitializeEvents: initializeEvents\n\t};\n}(); /*\n     \tImport the necessary classes and config to use\n     \twith the events.\n     */\nexports.default = AmplitudeEvents;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _visual = __webpack_require__(2);\n\nvar _visual2 = _interopRequireDefault(_visual);\n\nvar _core = __webpack_require__(3);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _helpers = __webpack_require__(1);\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n|-------------------------------------------------------------------------------\n| EVENT HANDLER HELPER METHODS\n|-------------------------------------------------------------------------------\n| These methods help handle interactions whether it's computation or shuffling \n| songs.\n|\n| METHODS\n|\tcomputeCurrentTimes()\n|\tcomputeSongDuration()\n|\tcomputeSongCompletionPercentage()\n*/\nvar AmplitudeEventHelpers = function () {\n\t/*--------------------------------------------------------------------------\n \tComputes the current song time. Breaks down where the song is into\n \thours, minutes, seconds and formats it to be displayed to the user.\n --------------------------------------------------------------------------*/\n\tfunction computeCurrentTimes() {\n\t\t/*\n  \tInitialize the current time object that will be returned.\n  */\n\t\tvar currentTime = {};\n\n\t\t/*\n  \tComputes the current seconds for the song.\n  */\n\t\tvar currentSeconds = (Math.floor(_config2.default.active_song.currentTime % 60) < 10 ? '0' : '') + Math.floor(_config2.default.active_song.currentTime % 60);\n\n\t\t/*\n  \tComputes the current minutes for the song.\n  */\n\t\tvar currentMinutes = Math.floor(_config2.default.active_song.currentTime / 60);\n\n\t\t/*\n  \tInitialize the current hours variable.\n  */\n\t\tvar currentHours = '00';\n\n\t\t/*\n  \tIf the current minutes is less than 10, we add a leading 0.\n  */\n\t\tif (currentMinutes < 10) {\n\t\t\tcurrentMinutes = '0' + currentMinutes;\n\t\t}\n\n\t\t/*\n  \tIf the user is more than 60 minutes into the song, then\n  \twe extract the hours.\n  */\n\t\tif (currentMinutes > 60) {\n\t\t\tcurrentHours = Math.floor(currentMinutes / 60);\n\t\t\tcurrentMinutes = currentMinutes % 60;\n\n\t\t\t/*\n   \tIf the user is less than 10 hours in, we append the\n   \tadditional 0 to the hours.\n   */\n\t\t\tif (currentHours < 10) {\n\t\t\t\tcurrentHours = '0' + currentHours;\n\t\t\t}\n\n\t\t\t/*\n   \tIf the user is less than 10 minutes in, we append the\n   \tadditional 0 to the minutes.\n   */\n\t\t\tif (currentMinutes < 10) {\n\t\t\t\tcurrentMinutes = '0' + currentMinutes;\n\t\t\t}\n\t\t}\n\n\t\t/*\n  \tBuild a clean current time object and send back the appropriate information.\n  */\n\t\tcurrentTime.seconds = currentSeconds;\n\t\tcurrentTime.minutes = currentMinutes;\n\t\tcurrentTime.hours = currentHours;\n\n\t\treturn currentTime;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tComputes the current song duration. Breaks down where the song is into\n \thours, minutes, seconds and formats it to be displayed to the user.\n --------------------------------------------------------------------------*/\n\tfunction computeSongDuration() {\n\t\t/*\n  \tInitialize the song duration object that will be returned.\n  */\n\t\tvar songDuration = {};\n\n\t\t/*\n  \tComputes the duration of the song's seconds.\n  */\n\t\tvar songDurationSeconds = (Math.floor(_config2.default.active_song.duration % 60) < 10 ? '0' : '') + Math.floor(_config2.default.active_song.duration % 60);\n\n\t\t/*\n  \tComputes the duration of the song's minutes.\n  */\n\t\tvar songDurationMinutes = Math.floor(_config2.default.active_song.duration / 60);\n\n\t\t/*\n  \tInitialize the hours duration variable.\n  */\n\t\tvar songDurationHours = '00';\n\n\t\t/*\n  \tIf the song duration minutes is less than 10, we add a leading 0.\n  */\n\t\tif (songDurationMinutes < 10) {\n\t\t\tsongDurationMinutes = '0' + songDurationMinutes;\n\t\t}\n\n\t\t/*\n  \tIf there is more than 60 minutes in the song, then we\n  \textract the hours.\n  */\n\t\tif (songDurationMinutes > 60) {\n\t\t\tsongDurationHours = Math.floor(songDurationMinutes / 60);\n\t\t\tsongDurationMinutes = songDurationMinutes % 60;\n\n\t\t\t/*\n   \tIf the song duration hours is less than 10 we append\n   \tthe additional 0.\n   */\n\t\t\tif (songDurationHours < 10) {\n\t\t\t\tsongDurationHours = '0' + songDurationHours;\n\t\t\t}\n\n\t\t\t/*\n   \tIf the song duration minutes is less than 10 we append\n   \tthe additional 0.\n   */\n\t\t\tif (songDurationMinutes < 10) {\n\t\t\t\tsongDurationMinutes = '0' + songDurationMinutes;\n\t\t\t}\n\t\t}\n\n\t\t/*\n  \tBuild a clean song duration object and send back the appropriate information.\n  */\n\t\tsongDuration.seconds = songDurationSeconds;\n\t\tsongDuration.minutes = songDurationMinutes;\n\t\tsongDuration.hours = songDurationHours;\n\n\t\treturn songDuration;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tComputes the song completion percentage.\n --------------------------------------------------------------------------*/\n\tfunction computeSongCompletionPercentage() {\n\t\treturn _config2.default.active_song.currentTime / _config2.default.active_song.duration * 100;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the current song's playback speed\n \t\t@param float speed The float with a base of 1 representing the speed\n --------------------------------------------------------------------------*/\n\tfunction setPlaybackSpeed(speed) {\n\t\t_core2.default.setPlaybackSpeed(speed);\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the state of the repeat for the current song.\n \t\t@param bool repeat A boolean representing whether the repeat should\n \tbe on or off\n --------------------------------------------------------------------------*/\n\tfunction setRepeat(repeat) {\n\t\t_config2.default.repeat = repeat;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the main play pause buttons to the current state of the song.\n --------------------------------------------------------------------------*/\n\tfunction setMainPlayPause() {\n\t\t/*\n  \tDetermines what action we should take based on the\n  \tstate of the song.\n  */\n\t\tif (_config2.default.active_song.paused) {\n\t\t\t/*\n   \tThe song was paused so we sync visually for the song\n   \tthat is playing and we play the song.\n   */\n\t\t\t_visual2.default.syncMainPlayPause('playing');\n\n\t\t\t/*\n   \tIf there is an active playlist, then\n   \twe need to sync that playlist's play pause\n   \tbutton to the state of playing.\n   */\n\t\t\t_visual2.default.syncPlaylistPlayPause(_config2.default.active_playlist, 'playing');\n\n\t\t\t/*\n   \tSync the song play pause buttons\n   */\n\t\t\t_visual2.default.syncSongPlayPause(_config2.default.active_playlist, _config2.default.active_index, 'playing');\n\n\t\t\t/*\n   \tPlay the song\n   */\n\t\t\t_core2.default.play();\n\t\t} else {\n\t\t\t/*\n   \tThe song was playing so we sync visually for the song\n   \tto be paused and we pause the song.\n   */\n\t\t\t_visual2.default.syncMainPlayPause('paused');\n\n\t\t\t/*\n   \tIf there is an active playlist, then\n   \twe need to sync that playlist's play pause\n   \tbutton to the state of paused.\n   */\n\t\t\t_visual2.default.syncPlaylistPlayPause(_config2.default.active_playlist, 'paused');\n\n\t\t\t/*\n   \tSync the song play pause buttons\n   */\n\t\t\t_visual2.default.syncSongPlayPause(_config2.default.active_playlist, _config2.default.active_index, 'paused');\n\n\t\t\t/*\n   \tPause the song\n   */\n\t\t\t_core2.default.pause();\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the playlist main play pause buttons to the current state of the song.\n \t\t@param string playlist The playlist the main play pause button controls\n --------------------------------------------------------------------------*/\n\tfunction setPlaylistPlayPause(playlist) {\n\t\t/*\n  \tThe only thing that can change when you click a playlist\n  \tplay pause is the playlist. Main play pauses have no change\n  \tin song, song play pauses can change playlist and song.\n  */\n\t\tif (_helpers2.default.checkNewPlaylist(playlist)) {\n\t\t\t_helpers2.default.setActivePlaylist(playlist);\n\n\t\t\t/*\n   \tPlay first song in the playlist since we just\n   \tswitched playlists, we start from the first song.\n   \t\tIf the user has shuffle on for the playlist, then\n   \twe go from the first song in the shuffle playlist array.\n   */\n\t\t\tif (_config2.default.shuffled_statuses[playlist]) {\n\t\t\t\t_helpers2.default.changeSong(_config2.default.shuffled_playlists[playlist][0].original_index);\n\t\t\t} else {\n\t\t\t\t_helpers2.default.changeSong(_config2.default.playlists[playlist][0]);\n\t\t\t}\n\t\t}\n\n\t\t/*\n  \tDetermines what action we should take based on the\n  \tstate of the song.\n  */\n\t\tif (_config2.default.active_song.paused) {\n\t\t\t/*\n   \tThe song was paused so we sync visually for the song\n   \tthat is playing and we play the song.\n   */\n\t\t\t_visual2.default.syncMainPlayPause('playing');\n\n\t\t\t/*\n   \tIf there is an active playlist, then\n   \twe need to sync that playlist's play pause\n   \tbutton to the state of playing.\n   */\n\t\t\t_visual2.default.syncPlaylistPlayPause(_config2.default.active_playlist, 'playing');\n\n\t\t\t/*\n   \tSync the song play pause buttons\n   */\n\t\t\t_visual2.default.syncSongPlayPause(_config2.default.active_playlist, _config2.default.active_index, 'playing');\n\n\t\t\t/*\n   \tPlay the song\n   */\n\t\t\t_core2.default.play();\n\t\t} else {\n\t\t\t/*\n   \tThe song was playing so we sync visually for the song\n   \tto be paused and we pause the song.\n   */\n\t\t\t_visual2.default.syncMainPlayPause('paused');\n\n\t\t\t/*\n   \tIf there is an active playlist, then\n   \twe need to sync that playlist's play pause\n   \tbutton to the state of paused.\n   */\n\t\t\t_visual2.default.syncPlaylistPlayPause(_config2.default.active_playlist, 'paused');\n\n\t\t\t/*\n   \tSync the song play pause buttons\n   */\n\t\t\t_visual2.default.syncSongPlayPause(_config2.default.active_playlist, _config2.default.active_index, 'paused');\n\n\t\t\t/*\n   \tPause the song\n   */\n\t\t\t_core2.default.pause();\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the song play pause buttons to the current state of the song.\n \t\t@param string playlist The playlist the song is a part of\n \t@param int songIndex The index of the song being played/paused\n --------------------------------------------------------------------------*/\n\tfunction setSongPlayPause(playlist, songIndex) {\n\t\t/*\n  \tThere can be multiple playlists on the page and there can be\n  \tmultiple songs on the page AND there can be songs in multiple\n  \tplaylists, so we have some checking to do.\n  */\n\n\t\t/*\n  \tCheck to see if the playlist has changed. If it has,\n  \tset the active playlist.\n  */\n\t\tif (_helpers2.default.checkNewPlaylist(playlist)) {\n\t\t\t_helpers2.default.setActivePlaylist(playlist);\n\n\t\t\t/*\n   \tIf there's a new playlist then we reset the\n   \tsong since the song could be in 2 playlists,\n   \tbut the user selects another playlist.\n   */\n\t\t\t_helpers2.default.changeSong(songIndex);\n\t\t}\n\n\t\t/*\n  \tCheck to see if the song has changed. If it has,\n  \tset the active song. If it was in a playlist, the\n  \tsong wouldn't change here, since we already set the\n  \tsong when we checked for a playlist.\n  */\n\t\tif (_helpers2.default.checkNewSong(songIndex)) {\n\t\t\t/*\n   \tThe song selected is different, so we change the\n   \tsong.\n   */\n\t\t\t_helpers2.default.changeSong(songIndex);\n\t\t}\n\n\t\t/*\n  \tDetermines what action we should take based on the\n  \tstate of the song.\n  */\n\t\tif (_config2.default.active_song.paused) {\n\t\t\t/*\n   \tThe song was paused so we sync visually for the song\n   \tthat is playing and we play the song.\n   */\n\t\t\t_visual2.default.syncMainPlayPause('playing');\n\n\t\t\t/*\n   \tIf there is an active playlist, then\n   \twe need to sync that playlist's play pause\n   \tbutton to the state of playing.\n   */\n\t\t\t_visual2.default.syncPlaylistPlayPause(_config2.default.active_playlist, 'playing');\n\n\t\t\t/*\n   \tSync the song play pause buttons\n   */\n\t\t\t_visual2.default.syncSongPlayPause(_config2.default.active_playlist, _config2.default.active_index, 'playing');\n\n\t\t\t/*\n   \tPlay the song\n   */\n\t\t\t_core2.default.play();\n\t\t} else {\n\t\t\t/*\n   \tThe song was playing so we sync visually for the song\n   \tto be paused and we pause the song.\n   */\n\t\t\t_visual2.default.syncMainPlayPause('paused');\n\n\t\t\t/*\n   \tIf there is an active playlist, then\n   \twe need to sync that playlist's play pause\n   \tbutton to the state of paused.\n   */\n\t\t\t_visual2.default.syncPlaylistPlayPause(_config2.default.active_playlist, 'paused');\n\n\t\t\t/*\n   \tSync the song play pause buttons\n   */\n\t\t\t_visual2.default.syncSongPlayPause(_config2.default.active_playlist, _config2.default.active_index, 'paused');\n\n\t\t\t/*\n   \tPause the song\n   */\n\t\t\t_core2.default.pause();\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the shuffle state for a playlist\n \t\t@param string playlist The playlist being shuffled\n --------------------------------------------------------------------------*/\n\tfunction setShuffle(playlist) {\n\t\t/*\n  \tIf the playlist is null, then we are dealing with the global\n  \tshuffle status.\n  */\n\t\tif (playlist == null) {\n\t\t\t/*\n   \tIf shuffle is on, we toggle it off. If shuffle is off, we\n   \ttoggle on.\n   */\n\t\t\tif (_config2.default.shuffle_on) {\n\t\t\t\t_config2.default.shuffle_on = false;\n\t\t\t\t_config2.default.shuffle_list = {};\n\t\t\t} else {\n\t\t\t\t_config2.default.shuffle_on = true;\n\t\t\t\t_helpers2.default.shuffleSongs();\n\t\t\t}\n\n\t\t\t/*\n   \tVisually sync the shuffle statuses\n   */\n\t\t\t_visual2.default.syncShuffle(_config2.default.shuffle_on);\n\t\t} else {\n\t\t\t/*\n   \tIf the playlist shuffled is on, we toggle it off. If the\n   \tplaylist shuffled is off, we toggle it on.\n   */\n\t\t\tif (_config2.default.shuffled_statuses[playlist]) {\n\t\t\t\t_config2.default.shuffled_statuses[playlist] = false;\n\t\t\t\t_config2.default.shuffled_playlists[playlist] = [];\n\t\t\t} else {\n\t\t\t\t_config2.default.shuffled_statuses[playlist] = true;\n\t\t\t\t_helpers2.default.shufflePlaylistSongs(playlist);\n\t\t\t}\n\n\t\t\t/*\n   \tVisually sync the playlist shuffle statuses.\n   */\n\t\t\t_visual2.default.syncPlaylistShuffle(_config2.default.shuffled_statuses[playlist], playlist);\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the next song when next is clicked\n \t\t@param songEnded (default false) If the song ended, this is set to true\n \tso we take into effect the repeat setting.\n --------------------------------------------------------------------------*/\n\tfunction setNext() {\n\t\tvar songEnded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n\t\t/*\n  \tInitializes the next index variable. This will be the\n  \tindex of the song that is next.\n  */\n\t\tvar nextIndex = 0;\n\t\t/*\n    Ensure we don't loop in the playlist if config.repeat is not true \n  */\n\t\tvar endOfList = false;\n\n\t\t/*\n  \tIf the shuffle is on, we use the shuffled list of\n  \tsongs to determine our next song.\n  */\n\t\tif (_config2.default.shuffle_on) {\n\t\t\t/*\n   \tIf the active shuffle index + 1 is less than the length, then\n   \twe use the next shuffle otherwise we go to the beginning\n   \tof the shuffle list.\n   */\n\t\t\tif (_config2.default.shuffle_active_index + 1 < _config2.default.shuffle_list.length) {\n\t\t\t\t_config2.default.shuffle_active_index = parseInt(_config2.default.shuffle_active_index) + 1;\n\n\t\t\t\t/*\n    \tSet the next index to be the index of the song in the shuffle list.\n    */\n\t\t\t\tnextIndex = _config2.default.shuffle_list[parseInt(_config2.default.shuffle_active_index)].original_index;\n\t\t\t} else {\n\t\t\t\t_config2.default.shuffle_active_index = 0;\n\t\t\t\tnextIndex = 0;\n\t\t\t\tendOfList = true;\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n   \tIf the active index + 1 is less than the length of the songs, then\n   \twe use the next song otherwise we go to the beginning of the\n   \tsong list.\n   */\n\t\t\tif (_config2.default.active_index + 1 < _config2.default.songs.length) {\n\t\t\t\t_config2.default.active_index = parseInt(_config2.default.active_index) + 1;\n\t\t\t} else {\n\t\t\t\t_config2.default.active_index = 0;\n\t\t\t\tendOfList = true;\n\t\t\t}\n\n\t\t\t/*\n   \tSets the next index.\n   */\n\t\t\tnextIndex = _config2.default.active_index;\n\t\t}\n\n\t\t/*\n  \tStops the active song.\n  */\n\t\t_core2.default.stop();\n\n\t\t/*\n  \tChange the song to the index we need.\n  */\n\t\t_helpers2.default.changeSong(nextIndex);\n\n\t\t/*\n  \tIf the song has ended and repeat is on, play the song.\n  */\n\t\tif (!(songEnded && !_config2.default.repeat && endOfList)) {\n\t\t\t_core2.default.play();\n\t\t}\n\n\t\t/*\n  \tSyncs the main play pause button, playlist play pause button and\n  \tsong play pause.\n  */\n\t\t_visual2.default.syncMainPlayPause();\n\t\t_visual2.default.syncSongPlayPause(null, nextIndex);\n\n\t\t/*\n  \tCall after next callback\n  */\n\t\t_helpers2.default.runCallback('after_next');\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the next song in a playlist\n \t\t@param string playlist The playlist being shuffled\n \t@param songEnded (default false) If the song ended, this is set to true\n \tso we take into effect the repeat setting.\n --------------------------------------------------------------------------*/\n\tfunction setNextPlaylist(playlist) {\n\t\tvar songEnded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\t\t/*\n  \tInitializes the next index\n  */\n\t\tvar nextIndex = 0;\n\n\t\t/*\n    Used to determine whether the playlist looped over\n    If it did, only play if repeat is allowed, end otherwise \n    @TODO: Different settings for song loop, in-playlist loop and global loop\n  */\n\t\tvar endOfList = false;\n\t\t/*\n  \tIf the playlist is shuffled we get the next index of the playlist.\n  */\n\t\tif (_config2.default.shuffled_statuses[playlist]) {\n\t\t\t/*\n   \tGets the shuffled playlist's active song index.\n   */\n\t\t\tvar shuffledPlaylistActiveSongIndex = parseInt(_config2.default.shuffled_active_indexes[playlist]);\n\n\t\t\t/*\n   \tIf the index + 1 is less than the length of the playlist, we increment\n   \tthe next index otherwise we take the first index of 0.\n   */\n\t\t\tif (shuffledPlaylistActiveSongIndex + 1 < _config2.default.shuffled_playlists[playlist].length) {\n\t\t\t\t/*\n    \tSet the shuffled playlist active song index.\n    */\n\t\t\t\t_config2.default.shuffled_active_indexes[playlist] = shuffledPlaylistActiveSongIndex + 1;\n\t\t\t\t/*\n    \tGet the index of the song that we will be switching to.\n    */\n\t\t\t\tnextIndex = _config2.default.shuffled_playlists[playlist][_config2.default.shuffled_active_indexes[playlist]].original_index;\n\t\t\t} else {\n\t\t\t\t/*\n    \tSets the active shuffled playlist active index to 0 and gets the original index of\n    \tthe song at the shuffled index of 0.\n    */\n\t\t\t\t_config2.default.shuffled_active_indexes[playlist] = 0;\n\t\t\t\tnextIndex = _config2.default.shuffled_playlists[playlist][0].original_index;\n\t\t\t\tendOfList = true;\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n   \tGets the index of the active song within the scope\n   \tof the playlist.\n   */\n\t\t\tvar playlistActiveSongIndex = _config2.default.playlists[playlist].indexOf(parseInt(_config2.default.active_index));\n\n\t\t\t/*\n   \tChecks to see if the next index is still less than the length of the playlist.\n   \tIf it is, use the next index othwerwise get the first song in the playlist.\n   */\n\t\t\tif (playlistActiveSongIndex + 1 < _config2.default.playlists[playlist].length) {\n\t\t\t\t_config2.default.active_index = parseInt(_config2.default.playlists[playlist][playlistActiveSongIndex + 1]);\n\t\t\t} else {\n\t\t\t\t_config2.default.active_index = parseInt(_config2.default.playlists[playlist][0]);\n\t\t\t\tendOfList = true;\n\t\t\t}\n\n\t\t\t/*\n   \tSets the next inex to the active index in the config.\n   */\n\t\t\tnextIndex = _config2.default.active_index;\n\t\t}\n\n\t\t/*\n  \tStops the active song playing.\n  */\n\n\t\t_core2.default.stop();\n\n\t\t/*\n  \tChanges the song to the next song in the playlist.\n  */\n\t\t_helpers2.default.changeSong(nextIndex);\n\t\t_helpers2.default.setActivePlaylist(playlist);\n\n\t\t/*\n  \tIf the song has ended and repeat is on, play the song.\n  */\n\t\tif (!(songEnded && !_config2.default.repeat && endOfList)) _core2.default.play();\n\n\t\t/*\n  \tSyncs the main play pause button, playlist play pause button and\n  \tsong play pause.\n  */\n\t\t_visual2.default.syncMainPlayPause();\n\t\t_visual2.default.syncPlaylistPlayPause(playlist);\n\t\t_visual2.default.syncSongPlayPause(playlist, nextIndex);\n\n\t\t/*\n  \tCall after next callback\n  */\n\t\t_helpers2.default.runCallback('after_next');\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the previous song\n --------------------------------------------------------------------------*/\n\tfunction setPrev() {\n\t\t/*\n  \tInitializes the prev index variable. This will be the\n  \tindex of the song that is next.\n  */\n\t\tvar prevIndex = 0;\n\n\t\t/*\n  \tIf the shuffle is on for the individual songs, we get the previous\n  \tsong.\n  */\n\t\tif (_config2.default.shuffle_on) {\n\t\t\t/*\n   \tIf the previous index is greater than or equal to 0, we use the active \n   \tindex - 1.\n   */\n\t\t\tif (parseInt(_config2.default.shuffle_active_index) - 1 >= 0) {\n\t\t\t\t/*\n    \tSets the new active to be 1 less than the current active index.\n    */\n\t\t\t\t_config2.default.shuffle_active_index = parseInt(_config2.default.shuffle_active_index) - 1;\n\n\t\t\t\t/*\n    \tGets the index of the song in the song array for the new index.\n    */\n\t\t\t\tprevIndex = _config2.default.shuffle_list[parseInt(_config2.default.shuffle_active_index)].original_index;\n\t\t\t} else {\n\t\t\t\t/*\n    \tSet the active index and previous index.\n    */\n\t\t\t\t_config2.default.shuffle_active_index = _config2.default.shuffle_list.length - 1;\n\t\t\t\tprevIndex = _config2.default.shuffle_list[parseInt(_config2.default.shuffle_list.length) - 1].original_index;\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n   \tIf the active index - 1 is greater than or equal to 0, we subtract 1 from the\n   \tactive index otherwise we set the active index to the end of the songs array index.\n   */\n\t\t\tif (parseInt(_config2.default.active_index) - 1 >= 0) {\n\t\t\t\t_config2.default.active_index = parseInt(_config2.default.active_index) - 1;\n\t\t\t} else {\n\t\t\t\t_config2.default.active_index = _config2.default.songs.length - 1;\n\t\t\t}\n\n\t\t\t/*\n   \tSet the previous index.\n   */\n\t\t\tprevIndex = _config2.default.active_index;\n\t\t}\n\n\t\t/*\n  \tStops the active song.\n  */\n\t\t_core2.default.stop();\n\n\t\t/*\n  \tChange the song to the index we need.\n  */\n\t\t_helpers2.default.changeSong(prevIndex);\n\n\t\t/*\n  \tPlay the next song.\n  */\n\t\t_core2.default.play();\n\n\t\t/*\n  \tSync the play/pause buttons to the current state of the player.\n  */\n\t\t_visual2.default.syncMainPlayPause('playing');\n\t\t_visual2.default.syncSongPlayPause(null, prevIndex, 'playing');\n\n\t\t/*\n  \tCall after prev callback\n  */\n\t\t_helpers2.default.runCallback('after_prev');\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the previous song in a playlist\n \t\t@param\tstring\tThe Playlist we are setting the previous for.\n --------------------------------------------------------------------------*/\n\tfunction setPrevPlaylist(playlist) {\n\t\t/*\n  \tInitializes the prev index variable. This will be the\n  \tindex of the song that is next.\n  */\n\t\tvar prevIndex = 0;\n\n\t\t/*\n  \tIf the shuffle is on for the playlist, we get the previous\n  \tsong.\n  */\n\t\tif (_config2.default.shuffled_statuses[playlist]) {\n\t\t\t/*\n   \tGets the active song index for the shuffled playlist\n   */\n\t\t\tvar shuffledPlaylistActiveSongIndex = parseInt(_config2.default.shuffled_active_indexes[playlist]);\n\n\t\t\t/*\n   \tIf the shuffled song active index is greater than or equal to 0, \n   \twe use the active index - 1.\n   */\n\t\t\tif (shuffledPlaylistActiveSongIndex - 1 >= 0) {\n\t\t\t\t/*\n    \tSets the active index to the active song index - 1\n    */\n\t\t\t\t_config2.default.shuffled_active_indexes[playlist] = shuffledPlaylistActiveSongIndex - 1;\n\n\t\t\t\t/*\n    \tGets the index of the song in the song array for the new index.\n    */\n\t\t\t\tprevIndex = _config2.default.shuffled_playlists[playlist][_config2.default.shuffled_active_indexes[playlist]].original_index;\n\t\t\t} else {\n\t\t\t\t/*\n    \tSet the active index and previous index.\n    */\n\t\t\t\t_config2.default.shuffled_active_indexes[playlist] = _config2.default.shuffled_playlists[playlist].length - 1;\n\t\t\t\tprevIndex = _config2.default.shuffled_playlists[playlist][_config2.default.shuffled_playlists[playlist].length - 1].original_index;\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n   \tGets the active song index for the playlist\n   */\n\t\t\tvar playlistActiveSongIndex = _config2.default.playlists[playlist].indexOf(parseInt(_config2.default.active_index));\n\n\t\t\t/*\n   \tIf the active song index in the playlist - 1 is greater than\n   \tor equal to 0, then we use the active song index - 1.\n   */\n\t\t\tif (playlistActiveSongIndex - 1 >= 0) {\n\t\t\t\t_config2.default.active_index = parseInt(_config2.default.playlists[playlist][playlistActiveSongIndex - 1]);\n\t\t\t} else {\n\t\t\t\t_config2.default.active_index = parseInt(_config2.default.playlists[playlist][_config2.default.playlists[playlist].length - 1]);\n\t\t\t}\n\n\t\t\t/*\n   \tSet the previous index to the active index for use later.\n   */\n\t\t\tprevIndex = _config2.default.active_index;\n\t\t}\n\n\t\t/*\n  \tStops the active song.\n  */\n\t\t_core2.default.stop();\n\n\t\t/*\n  \tChanges the song to the prev song in the playlist.\n  */\n\t\t_helpers2.default.changeSong(prevIndex);\n\t\t_helpers2.default.setActivePlaylist(playlist);\n\n\t\t/*\n  \tPlays the song\n  */\n\t\t_core2.default.play();\n\n\t\t/*\n  \tSyncs the main play pause button, playlist play pause button and\n  \tsong play pause.\n  */\n\t\t_visual2.default.syncMainPlayPause('playing');\n\t\t_visual2.default.syncPlaylistPlayPause(playlist, 'playing');\n\t\t_visual2.default.syncSongPlayPause(playlist, prevIndex, 'playing');\n\n\t\t/*\n  \tCall after prev callback\n  */\n\t\t_helpers2.default.runCallback('after_prev');\n\t}\n\n\t/*\n \tReturn the publically scoped functions\n */\n\treturn {\n\t\tcomputeCurrentTimes: computeCurrentTimes,\n\t\tcomputeSongDuration: computeSongDuration,\n\t\tcomputeSongCompletionPercentage: computeSongCompletionPercentage,\n\t\tsetPlaybackSpeed: setPlaybackSpeed,\n\t\tsetRepeat: setRepeat,\n\t\tsetMainPlayPause: setMainPlayPause,\n\t\tsetPlaylistPlayPause: setPlaylistPlayPause,\n\t\tsetSongPlayPause: setSongPlayPause,\n\t\tsetShuffle: setShuffle,\n\t\tsetNext: setNext,\n\t\tsetNextPlaylist: setNextPlaylist,\n\t\tsetPrev: setPrev,\n\t\tsetPrevPlaylist: setPrevPlaylist\n\t};\n}();\n\nexports.default = AmplitudeEventHelpers;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _core = __webpack_require__(3);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _helpers = __webpack_require__(1);\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _events = __webpack_require__(4);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _soundcloud = __webpack_require__(9);\n\nvar _soundcloud2 = _interopRequireDefault(_soundcloud);\n\nvar _visual = __webpack_require__(2);\n\nvar _visual2 = _interopRequireDefault(_visual);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar config = __webpack_require__(0);\n\n/*\n|----------------------------------------------------------------------------------------------------\n| INITIALIZER FOR AMPLITUDE JS\n|----------------------------------------------------------------------------------------------------\n| These methods initialize AmplitudeJS and make sure everything is ready to run\n|\n| METHODS\n|\tinitialize( userConfig )\n|\tcountPlaylists( playlists )\n|\tcheckValidSongsInPlaylists()\n|\tplaylistShuffleStatuses()\n|\tplaylistShuffleLists()\n|\teventHandlers()\n*/\nvar AmplitudeInitializer = function () {\n\n\t/*--------------------------------------------------------------------------\n \tThe main init function.  The user will call this through \n \tAmplitude.init({}) and pass in their settings.\n \t\n \tPublic Accessor: Amplitude.init( user_config_json );\n \t \t@param userConfig A JSON object of user defined values that help \n  \tconfigure and initialize AmplitudeJS.\n --------------------------------------------------------------------------*/\n\tfunction initialize(userConfig) {\n\t\tvar ready = false;\n\t\t/*\n  \tReset the config on init so we have a clean slate. This is if the\n  \tuser has to re-init.\n  */\n\t\t_helpers2.default.resetConfig();\n\n\t\t/*\n  \tInitialize event handlers on init. This will clear any old\n  \tevent handlers on the amplitude element and re-bind what is\n  \tnecessary.\n  */\n\t\t_events2.default.initializeEvents();\n\n\t\t/*\n  \tIn Amplitude there are 2 different types of song time visualizations.\n  \t1st is the HTML5 range element. The 2nd is a div that gets filled in\n  \tproportionately to the amount of time elapsed in the song. The user \n  \tcan style this and represent the amount played visually. This\n  \tinitializes all of the 2nd type by inserting an element into each\n  \tof the defined divs that will expand the width according to song\n  \tplayed percentage.\n  */\n\t\tinitializeSongTimeVisualizations();\n\n\t\t/*\n  \tInitializes debugging right away so we can use it for the rest\n  \tof the configuration.\n  */\n\t\tconfig.debug = userConfig.debug != undefined ? userConfig.debug : false;\n\n\t\t/*\n  \tChecks to see if the user has songs defined.\n  */\n\t\tif (userConfig.songs) {\n\t\t\t/*\n   \tChecks to see if the user has some songs in the songs array.\n   */\n\t\t\tif (userConfig.songs.length != 0) {\n\t\t\t\t/*\n    \tCopies over the user defined songs. and prepares\n    \tAmplitude for the rest of the configuration.\n    */\n\t\t\t\tconfig.songs = userConfig.songs;\n\t\t\t\t/*\n    \tFlag amplitude as ready.\n    */\n\t\t\t\tready = true;\n\t\t\t} else {\n\t\t\t\t_helpers2.default.writeDebugMessage('Please add some songs, to your songs object!');\n\t\t\t}\n\t\t} else {\n\t\t\t_helpers2.default.writeDebugMessage('Please provide a songs object for AmplitudeJS to run!');\n\t\t}\n\n\t\t/*\n  \tInitializes the audio context. In this method it checks to see if the\n  \tuser wants to use visualizations or not before proceeding.\n  \tAMPFX-TODO: MAKE HANDLED BY AMPLITUDE FX.\n  */\n\t\t//privateHelpInitializeAudioContext();\n\n\t\t/*\n  \tChecks if the user has any playlists defined. If they do\n  \twe have to initialize the functionality for the playlists.\n  */\n\t\tif (userConfig.playlists && countPlaylists(userConfig.playlists) > 0) {\n\t\t\t/*\n   \tCopy the playlists over to Amplitude\n   */\n\t\t\tconfig.playlists = userConfig.playlists;\n\n\t\t\t/*\n   \tInitialize default live settings\n   */\n\t\t\tinitializeDefaultLiveSettings();\n\n\t\t\t/*\n   \tCheck to see if the user has valid song indexes in their playlist.\n   */\n\t\t\tcheckValidSongsInPlaylists();\n\n\t\t\t/*\n   \tInitialize the shuffle status of the playlists.\n   */\n\t\t\tinitializePlaylistShuffleStatuses();\n\n\t\t\t/*\n   \tInitialize temporary place holders for shuffle lists.\n   */\n\t\t\tinitializePlaylistShuffleLists();\n\n\t\t\t/*\n   \tInitializes the active shuffled indexes for shuffled playlists.\n   */\n\t\t\tinitializePlaylistShuffleIndexes();\n\n\t\t\t/*\n   \tInitializes the first song in the playlist\n   */\n\t\t\tinitializeFirstSongInPlaylistMetaData();\n\t\t}\n\n\t\t/*\n  \tWhen the preliminary config is ready, we are ready to proceed.\n  */\n\t\tif (ready) {\n\t\t\t/*\n   \tCopies over the soundcloud information to the global config\n   \twhich will determine where we go from there.\n   */\n\t\t\tconfig.soundcloud_client = userConfig.soundcloud_client != undefined ? userConfig.soundcloud_client : '';\n\n\t\t\t/*\n   \tChecks if we want to use the art loaded from soundcloud.\n   */\n\t\t\tconfig.soundcloud_use_art = userConfig.soundcloud_use_art != undefined ? userConfig.soundcloud_use_art : '';\n\n\t\t\t/*\n   \tIf the user provides a soundcloud client then we assume that\n   \tthere are URLs in their songs that will reference SoundcCloud.\n   \tWe then copy over the user config they provided to the \n   \ttemp_user_config so we don't mess up the global or their configs\n   \tand load the soundcloud information.\n   */\n\t\t\tif (config.soundcloud_client != '') {\n\t\t\t\ttempUserConfig = userConfig;\n\n\t\t\t\t/*\n    \tLoad up SoundCloud for use with AmplitudeJS.\n    */\n\t\t\t\t_soundcloud2.default.loadSoundCloud(tempUserConfig);\n\t\t\t} else {\n\t\t\t\t/*\n    \tThe user is not using Soundcloud with Amplitude at this point\n    \tso we just finish the configuration with the users's preferences.\n    */\n\t\t\t\tsetConfig(userConfig);\n\t\t\t}\n\t\t}\n\n\t\t/*\n  \tDebug out what was initialized with AmplitudeJS.\n  */\n\t\t_helpers2.default.writeDebugMessage('Initialized With: ');\n\t\t_helpers2.default.writeDebugMessage(config);\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tRebinds all of the elements in the display\n --------------------------------------------------------------------------*/\n\tfunction rebindDisplay() {\n\t\t_events2.default.initializeEvents();\n\t\tinitializeSongTimeVisualizations();\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tFinishes the initalization of the config. Takes all of the user defined\n \tparameters and makes sure they override the defaults. The important\n \tconfig information is assigned in the publicInit() function.\n \t\tThis function can be called from 2 different locations:\n \t\t1. Right away on init after the important settings are defined.\n \t\t\t2. After all of the Soundcloud URLs are resolved properly and\n \t\tsoundcloud is configured.  We will need the proper URLs from Soundcloud\n \t\tto stream through Amplitude so we get those right away before we\n \t\tset the information and the active song\n \t\t@param JSON userConfig The config provided by the user.\n --------------------------------------------------------------------------*/\n\tfunction setConfig(userConfig) {\n\t\t/*\n  \tCheck to see if the user entered a start song\n  */\n\t\tif (userConfig.start_song != undefined) {\n\t\t\t/*\n   \tEnsure what has been entered is an integer.\n   */\n\t\t\tif (_helpers2.default.isInt(userConfig.start_song)) {\n\t\t\t\t_helpers2.default.changeSong(userConfig.start_song);\n\t\t\t} else {\n\t\t\t\t_helpers2.default.writeDebugMessage(\"You must enter an integer index for the start song.\");\n\t\t\t}\n\t\t} else {\n\t\t\t_helpers2.default.changeSong(0);\n\t\t}\n\n\t\t/*\n  \tIf the user defined a playback speed, we copy over their\n  \tpreference here, otherwise we default to normal playback\n  \tspeed of 1.0.\n  */\n\t\tconfig.playback_speed = userConfig.playback_speed != undefined ? userConfig.playback_speed : 1.0;\n\n\t\t/*\n  \tSets the audio playback speed.\n  */\n\t\t_core2.default.setPlaybackSpeed(config.playback_speed);\n\n\t\t/*\n  \tIf the user wants the song to be pre-loaded for instant\n  \tplayback, they set it to true. By default it's set to just\n  \tload the metadata.\n  */\n\t\tconfig.active_song.preload = userConfig.preload != undefined ? userConfig.preload : \"auto\";\n\n\t\t/*\n  \tInitializes the user defined callbacks. This should be a JSON\n  \tobject that contains a key->value store of the callback name\n  \tand the name of the function the user needs to call.\n  */\n\t\tconfig.callbacks = userConfig.callbacks != undefined ? userConfig.callbacks : {};\n\n\t\t/*\n  \tThe user can define a starting volume in a range of 0-100 with\n  \t0 being muted and 100 being the loudest. After the config is set\n  \tAmplitude sets the active song's volume to the volume defined\n  \tby the user.\n  */\n\t\tconfig.volume = userConfig.volume != undefined ? userConfig.volume : 50;\n\n\t\t/*\n  \tThe user can set the volume increment and decrement values between 1 and 100\n  \tfor when the volume up or down button is pressed.  The default is an increase\n  \tor decrease of 5.\n  */\n\t\tconfig.volume_increment = userConfig.volume_increment != undefined ? userConfig.volume_increment : 5;\n\n\t\tconfig.volume_decrement = userConfig.volume_decrement != undefined ? userConfig.volume_decrement : 5;\n\n\t\t/*\n  \tSet the volume to what is defined in the config. The user can define this,\n  \tso we should set it up that way.\n  */\n\t\t_core2.default.setVolume(config.volume);\n\n\t\t/*\n  \tSince the user can define a start volume, we want our volume\n  \tsliders to sync with the user defined start value.\n  */\n\t\t_visual2.default.syncVolumeSliders();\n\n\t\t/*\n  \tIf the user defines default album art, this image will display if the active\n  \tsong doesn't have album art defined.\n  */\n\t\tif (userConfig.default_album_art != undefined) {\n\t\t\tconfig.default_album_art = userConfig.default_album_art;\n\t\t} else {\n\t\t\tconfig.default_album_art = '';\n\t\t}\n\n\t\t/*\n  \tSyncs all of the visual time elements to 00.\n  */\n\t\t_visual2.default.resetTimes();\n\n\t\t/*\n  \tSets all of the play pause buttons to pause.\n  */\n\t\t_visual2.default.setPlayPauseButtonsToPause();\n\n\t\t/*\n  \tIf the user has autoplay enabled, then begin playing the song. Everything should\n  \tbe configured for this to be ready to play.\n  */\n\t\tif (userConfig.autoplay) {\n\t\t\tconfig.active_playlist = null;\n\t\t\t/*\n   \tSync the main and song play pause buttons.\n   */\n\t\t\t_visual2.default.syncMainPlayPause('playing');\n\t\t\t_visual2.default.syncSongPlayPause(null, 0, 'playing');\n\n\t\t\t/*\n   \tStart playing the song\n   */\n\t\t\t_core2.default.play();\n\t\t}\n\n\t\t/*\n  \tRun after init callback\n  */\n\t\t_helpers2.default.runCallback('after_init');\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets up all of the song time visualizations.  This is the only time\n \tthat AmplitudeJS will add an element to the page. AmplitudeJS will\n \tadd an element inside of the song time visualization element that will\n \texpand proportionally to the amount of time elapsed on the active \n \taudio, thus visualizing the song time.  This element is NOT user\n \tinteractive.  To have the user scrub the time, they will have to \n \tstyle and implement a song time slider with an HTML 5 Range Element.\n --------------------------------------------------------------------------*/\n\tfunction initializeSongTimeVisualizations() {\n\t\t/*\n  \tSets up song time visualizations\n  */\n\t\tvar song_time_visualizations = document.getElementsByClassName(\"amplitude-song-time-visualization\");\n\n\t\t/*\n  \tIterates through all of the amplitude-song-time-visualization\n  \telements adding a new div with a class of\n  \t'amplitude-song-time-visualization-status' that will expand\n  \tinside of the 'amplitude-song-time-visualization' element.\n  */\n\t\tfor (var i = 0; i < song_time_visualizations.length; i++) {\n\t\t\t/*\n   \tCreates new element\n   */\n\t\t\tvar status = document.createElement('div');\n\n\t\t\t/*\n   \tAdds class and attributes\n   */\n\t\t\tstatus.classList.add('amplitude-song-time-visualization-status');\n\t\t\tstatus.setAttribute('style', 'width: 0px');\n\n\t\t\t/*\n   \tClears the inner HTML so we don't get two status divs.\n   */\n\t\t\tsong_time_visualizations[i].innerHTML = '';\n\n\t\t\t/*\n   \tAppends the element as a child element.\n   */\n\t\t\tsong_time_visualizations[i].appendChild(status);\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tCounts the number of playlists the user has configured. This ensures\n \tthat the user has at least 1 playlist so we can validate the songs\n \tdefined in the playlist are correct and they didn't enter an invalid\n \tID.\n --------------------------------------------------------------------------*/\n\tfunction countPlaylists(playlists) {\n\t\t/*\n  \tInitialize the placeholders to iterate through the playlists\n  \tand find out how many we have to account for.\n  */\n\t\tvar size = 0,\n\t\t    key;\n\n\t\t/*\n  \tIterate over playlists and if the user has the playlist defined,\n  \tincrement the size of playlists.\n  */\n\t\tfor (key in playlists) {\n\t\t\tif (playlists.hasOwnProperty(key)) {\n\t\t\t\tsize++;\n\t\t\t}\n\t\t}\n\n\t\t/*\n  \tDebug how many playlists are in the config.\n  */\n\t\t_helpers2.default.writeDebugMessage('You have ' + size + ' playlist(s) in your config');\n\n\t\t/*\n  \tReturn the number of playlists in the config.\n  */\n\t\treturn size;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tEnsures the indexes in the playlists are valid indexes. The song has\n \tto exist in the Amplitude config to be played correctly.\n --------------------------------------------------------------------------*/\n\tfunction checkValidSongsInPlaylists() {\n\t\t/*\n  \tIterate over all of the config's playlists\n  */\n\t\tfor (var key in config.playlists) {\n\t\t\t/*\n   \tChecks if the playlist key is accurate.\n   */\n\t\t\tif (config.playlists.hasOwnProperty(key)) {\n\t\t\t\t/*\n    \tChecks if the playlist has songs.\n    */\n\t\t\t\tif (config.playlists[key].songs) {\n\t\t\t\t\t/*\n     \tIterate over all of the songs in the playlist\n     */\n\t\t\t\t\tfor (var i = 0; i < config.playlists[key].songs.length; i++) {\n\t\t\t\t\t\t/*\n      \tCheck to see if the index for the song in the playlist\n      \texists in the songs config.\n      */\n\t\t\t\t\t\tif (!config.songs[config.playlists[key].songs[i]]) {\n\t\t\t\t\t\t\t_helpers2.default.writeDebugMessage('The song index: ' + config.playlists[key].songs[i] + ' in playlist with key: ' + key + ' is not defined in your songs array!');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tInitializes the shuffle statuses for each of the playlists. These will\n \tbe referenced when we shuffle individual playlists.\n --------------------------------------------------------------------------*/\n\tfunction initializePlaylistShuffleStatuses() {\n\t\t/*\n  \tIterate over all of the playlists the user defined adding\n  \tthe playlist key to the shuffled playlist array and creating\n  \tand empty object to house the statuses.\n  */\n\t\tfor (var key in config.playlists) {\n\t\t\tconfig.shuffled_statuses[key] = false;\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tInitializes the shuffled playlist placeholders. These will be set for\n \tplaylists that are shuffled and contain the shuffled songs.\n --------------------------------------------------------------------------*/\n\tfunction initializePlaylistShuffleLists() {\n\t\t/*\n  \tIterate over all of the playlists the user defined adding\n  \tthe playlist key to the shuffled playlists array and creating\n  \tand empty object to house the shuffled playlists\n  */\n\t\tfor (var key in config.playlists) {\n\t\t\tconfig.shuffled_playlists[key] = [];\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tInitializes the shuffled playlist indexes array. These will be set for\n \tplaylists that are shuffled and contain the active shuffled index.\n --------------------------------------------------------------------------*/\n\tfunction initializePlaylistShuffleIndexes() {\n\t\t/*\n  \tIterates over all of the playlists adding a key\n  \tto the shuffled_active_indexes array that contains\n  \tthe active shuffled index.\n  */\n\t\tfor (var key in config.playlists) {\n\t\t\tconfig.shuffled_active_indexes[key] = 0;\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tIntializes the display for the first song in the playlist meta data.\n --------------------------------------------------------------------------*/\n\tfunction initializeFirstSongInPlaylistMetaData() {\n\t\t/*\n  \tIterates over all of the playlists setting the meta data for the\n  \tfirst song.\n  */\n\t\tfor (var key in config.playlists) {\n\t\t\t_visual2.default.setFirstSongInPlaylist(config.songs[config.playlists[key][0]], key);\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tIntializes the default live settings for all of the songs.\n --------------------------------------------------------------------------*/\n\tfunction initializeDefaultLiveSettings() {\n\t\tfor (var i = 0; i < config.songs.length; i++) {\n\t\t\tif (config.songs[i].live == undefined) {\n\t\t\t\tconfig.songs[i].live = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n \tReturns the publicly accessible methods\n */\n\treturn {\n\t\tinitialize: initialize,\n\t\tsetConfig: setConfig,\n\t\trebindDisplay: rebindDisplay\n\t};\n}();\n\nexports.default = AmplitudeInitializer;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _helpers = __webpack_require__(5);\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _visual = __webpack_require__(2);\n\nvar _visual2 = _interopRequireDefault(_visual);\n\nvar _core = __webpack_require__(3);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _helpers3 = __webpack_require__(1);\n\nvar _helpers4 = _interopRequireDefault(_helpers3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n|-------------------------------------------------------------------------------\n| EVENT HANDLER FUNCTIONS\n|-------------------------------------------------------------------------------\n| These functions handle the events that we bound to each element and\n| prepare for a function to be called. These kind of act like filters/middleware.\n|\n| METHODS\n|\tupdateTime()\n|\tsongEnded()\n|\tplay()\n|\tpause()\n|\tplayPause()\n|\tstop()\n|\tmute()\n|\tvolumeUp()\n|\tvolumeDown()\n|\tsongSlider()\n|\tvolumeSlider()\n|\tnext()\n|\tprev()\n|\tshuffle()\n|\trepeat()\n|\tplaybackSpeed()\n|\tskipTo()\n*/\nexports.default = {\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: timeupdate\n \t\tWhen the time updates on the active song, we sync the current time displays\n --------------------------------------------------------------------------*/\n\tupdateTime: function updateTime() {\n\t\t/*\n  \tIf the current song is not live, then\n  \twe can update the time information. Otherwise the\n  \tcurrent time updates wouldn't mean much since the time\n  \tis infinite.\n  */\n\t\tif (!_config2.default.active_metadata.live) {\n\t\t\t/*\n   \tCompute the current time\n   */\n\t\t\tvar currentTime = _helpers2.default.computeCurrentTimes();\n\n\t\t\t/*\n   \tCompute the song completion percentage\n   */\n\t\t\tvar songCompletionPercentage = _helpers2.default.computeSongCompletionPercentage();\n\n\t\t\t/*\n   \tComputes the song duration\n   */\n\t\t\tvar songDuration = _helpers2.default.computeSongDuration();\n\n\t\t\t/*\n   \tSync the current time elements with the current\n   \tlocation of the song and the song duration elements with\n   \tthe duration of the song.\n   */\n\t\t\t_visual2.default.syncCurrentTime(currentTime, songCompletionPercentage);\n\t\t\t_visual2.default.syncSongDuration(songDuration);\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: ended\n \t\tWhen the song has ended, handles what to do next\n --------------------------------------------------------------------------*/\n\tsongEnded: function songEnded() {\n\t\t/*\n  \tIf the active playlist is not set, we set the\n  \tnext song that's in the songs array.\n  */\n\t\tif (_config2.default.active_playlist == '' || _config2.default.active_playlist == null) {\n\t\t\t_helpers2.default.setNext(true);\n\t\t} else {\n\t\t\t/*\n   \tSet the next song in the playlist\n   */\n\t\t\t_helpers2.default.setNextPlaylist(_config2.default.active_playlist, true);\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-play'\n \t\tHandles an event on a play button in Amplitude.\n --------------------------------------------------------------------------*/\n\tplay: function play() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tGets the attribute for song index so we can check if\n   \tthere is a need to change the song.  In some scenarios\n   \tthere might be multiple play classes on the page. In that\n   \tcase it is possible the user could click a different play\n   \tclass and change the song.\n   */\n\t\t\tvar playButtonSongIndex = this.getAttribute('amplitude-song-index');\n\t\t\tvar playButtonPlaylistIndex = this.getAttribute('amplitude-playlist');\n\n\t\t\tif (playButtonPlaylistIndex == null && playButtonSongIndex == null) {\n\t\t\t\t_helpers2.default.setSongPlayPause(_config2.default.active_playlist, _config2.default.active_index);\n\t\t\t}\n\n\t\t\t/*\n   \t\n   */\n\t\t\tif (playButtonPlaylistIndex != null && playButtonPlaylistIndex != '') {\n\t\t\t\tif (_helpers4.default.checkNewPlaylist(playButtonPlaylistIndex)) {\n\t\t\t\t\t_helpers4.default.setActivePlaylist(playButtonPlaylistIndex);\n\n\t\t\t\t\tif (playButtonSongIndex != null) {\n\t\t\t\t\t\t_helpers4.default.changeSong(playButtonSongIndex);\n\t\t\t\t\t\t_helpers2.default.setPlaylistPlayPause(playButtonPlaylistIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_helpers4.default.changeSong(_config2.default.playlists[playButtonPlaylistIndex][0]);\n\t\t\t\t\t\t_helpers2.default.setPlaylistPlayPause(playButtonPlaylistIndex);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (playButtonSongIndex != null) {\n\t\t\t\t\t\t_helpers4.default.changeSong(playButtonSongIndex);\n\t\t\t\t\t\t_helpers2.default.setPlaylistPlayPause(playButtonPlaylistIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_helpers4.default.changeSong(_config2.default.active_index);\n\t\t\t\t\t\t_helpers2.default.setPlaylistPlayPause(playButtonPlaylistIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n   \t*/\n\t\t\tif ((playButtonPlaylistIndex == null || playButtonPlaylistIndex == '') && playButtonSongIndex != null && playButtonSongIndex != '') {\n\n\t\t\t\tif (_helpers4.default.checkNewSong(playButtonSongIndex) || _config2.default.active_playlist != playButtonPlaylistIndex) {\n\t\t\t\t\t_helpers4.default.changeSong(playButtonSongIndex);\n\t\t\t\t}\n\n\t\t\t\t_helpers2.default.setSongPlayPause(playButtonPlaylistIndex, playButtonSongIndex);\n\t\t\t}\n\n\t\t\t/*\n   \tStart the visualizations for the song. \n   \tAMPFX-TODO: MAKE HANDLED BY AMPLITUDE FX\n   */\n\t\t\t//privateStartVisualization();\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-pause'\n --------------------------------------------------------------------------*/\n\tpause: function pause() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\tvar pauseButtonSongIndex = this.getAttribute('amplitude-song-index');\n\t\t\tvar pauseButtonPlaylistIndex = this.getAttribute('amplitude-playlist');\n\n\t\t\tif (pauseButtonSongIndex == null && pauseButtonPlaylistIndex == null) {\n\t\t\t\t_helpers2.default.setSongPlayPause(_config2.default.active_playlist, _config2.default.active_index);\n\t\t\t\t_core2.default.pause();\n\t\t\t}\n\n\t\t\tif (pauseButtonPlaylistIndex != null || pauseButtonPlaylistIndex != '' && _config2.default.active_playlist == pauseButtonPlaylistIndex) {\n\t\t\t\t/*\n    \tThe song was playing so we sync visually for the song\n    \tto be paused and we pause the song.\n    */\n\t\t\t\t_visual2.default.syncMainPlayPause('paused');\n\n\t\t\t\t/*\n    \tIf there is an active playlist, then\n    \twe need to sync that playlist's play pause\n    \tbutton to the state of paused.\n    */\n\t\t\t\t_visual2.default.syncPlaylistPlayPause(_config2.default.active_playlist, 'paused');\n\n\t\t\t\t/*\n    \tSync the song play pause buttons\n    */\n\t\t\t\t_visual2.default.syncSongPlayPause(_config2.default.active_playlist, _config2.default.active_index, 'paused');\n\n\t\t\t\t_core2.default.pause();\n\t\t\t}\n\n\t\t\tif ((pauseButtonPlaylistIndex == null || pauseButtonPlaylistIndex == '') && pauseButtonSongIndex == _config2.default.active_index) {\n\t\t\t\t/*\n    \tThe song was playing so we sync visually for the song\n    \tto be paused and we pause the song.\n    */\n\t\t\t\t_visual2.default.syncMainPlayPause('paused');\n\n\t\t\t\t/*\n    \tIf there is an active playlist, then\n    \twe need to sync that playlist's play pause\n    \tbutton to the state of paused.\n    */\n\t\t\t\t_visual2.default.syncPlaylistPlayPause(_config2.default.active_playlist, 'paused');\n\n\t\t\t\t/*\n    \tSync the song play pause buttons\n    */\n\t\t\t\t_visual2.default.syncSongPlayPause(_config2.default.active_playlist, _config2.default.active_index, 'paused');\n\n\t\t\t\t_core2.default.pause();\n\t\t\t}\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-play-pause'\n \t\tHandles an event on a play pause button.\n --------------------------------------------------------------------------*/\n\tplayPause: function playPause() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tChecks to see if the element has an attribute for amplitude-main-play-pause\n   \tand syncs accordingly\n   */\n\t\t\tif (this.getAttribute('amplitude-main-play-pause') != null) {\n\t\t\t\t_helpers2.default.setMainPlayPause();\n\n\t\t\t\t/*\n    \tSyncs playlist main play pause buttons\n    */\n\t\t\t} else if (this.getAttribute('amplitude-playlist-main-play-pause') != null) {\n\t\t\t\tvar playlist = this.getAttribute('amplitude-playlist');\n\n\t\t\t\t_helpers2.default.setPlaylistPlayPause(playlist);\n\n\t\t\t\t/*\n    \tSyncs amplitude individual song buttons\n    */\n\t\t\t} else {\n\t\t\t\tvar playlist = this.getAttribute('amplitude-playlist');\n\t\t\t\tvar songIndex = this.getAttribute('amplitude-song-index');\n\n\t\t\t\t_helpers2.default.setSongPlayPause(playlist, songIndex);\n\t\t\t}\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-stop'\n \t\tHandles an event on a stop element.\n \t\tAMP-FX TODO: Before stopping, make sure that AmplitudeFX visualization\n \tis stopped as well.\n --------------------------------------------------------------------------*/\n\tstop: function stop() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tSets all of the play/pause buttons to pause\n   */\n\t\t\t_visual2.default.setPlayPauseButtonsToPause();\n\n\t\t\t/*\n   \tStops the active song.\n   */\n\t\t\t_core2.default.stop();\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-mute'\n \t\tHandles an event on a mute element.\n --------------------------------------------------------------------------*/\n\tmute: function mute() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tIf the current volume in the config is 0, we set the volume to the \n   \tpre_mute level.  This means that the audio is already muted and\n   \tneeds to be restored to the pre_mute level.\n   \t\n   \tOtherwise, we set pre_mute volume to the current volume\n   \tand set the config volume to 0, muting the audio.\n   */\n\t\t\tif (_config2.default.volume == 0) {\n\t\t\t\t_config2.default.volume = _config2.default.pre_mute_volume;\n\t\t\t\t_visual2.default.syncMute(false);\n\t\t\t} else {\n\t\t\t\t_config2.default.pre_mute_volume = _config2.default.volume;\n\t\t\t\t_config2.default.volume = 0;\n\t\t\t\t_visual2.default.syncMute(true);\n\t\t\t}\n\n\t\t\t/*\n   \tCalls the core function to set the volume to the computed value\n   \tbased on the user's intent.\n   */\n\t\t\t_core2.default.setVolume(_config2.default.volume);\n\n\t\t\t/*\n   \tSyncs the volume sliders so the visuals align up with the functionality.\n   \tIf the volume is at 0, then the sliders should represent that so the user\n   \thas the right starting point.\n   */\n\t\t\t_visual2.default.syncVolumeSliders(_config2.default.volume);\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-volume-up'\n \t\tHandles a click on a volume up element.\n --------------------------------------------------------------------------*/\n\tvolumeUp: function volumeUp() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tThe volume range is from 0 to 1 for an audio element. We make this\n   \ta base of 100 for ease of working with.\n   \t\tIf the new value is less than 100, we use the new calculated\n   \tvalue which gets converted to the proper unit for the audio element.\n   \t\tIf the new value is greater than 100, we set the volume to 1 which\n   \tis the max for the audio element.\n   */\n\t\t\tif (_config2.default.volume + _config2.default.volume_increment <= 100) {\n\t\t\t\t_config2.default.volume = _config2.default.volume + _config2.default.volume_increment;\n\t\t\t} else {\n\t\t\t\t_config2.default.volume = 100;\n\t\t\t}\n\n\t\t\t/*\n   \tCalls the core function to set the volume to the computed value\n   \tbased on the user's intent.\n   */\n\t\t\t_core2.default.setVolume(_config2.default.volume);\n\n\t\t\t/*\n   \tSyncs the volume sliders so the visuals align up with the functionality.\n   \tIf the volume is at 0, then the sliders should represent that so the user\n   \thas the right starting point.\n   */\n\t\t\t_visual2.default.syncVolumeSliders(_config2.default.volume);\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-volume-down'\n \t\tHandles a click on a volume down element.\n --------------------------------------------------------------------------*/\n\tvolumeDown: function volumeDown() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tThe volume range is from 0 to 1 for an audio element. We make this\n   \ta base of 100 for ease of working with.\n   \t\tIf the new value is less than 100, we use the new calculated\n   \tvalue which gets converted to the proper unit for the audio element.\n   \t\tIf the new value is greater than 100, we set the volume to 1 which\n   \tis the max for the audio element.\n   */\n\t\t\tif (_config2.default.volume - _config2.default.volume_increment > 0) {\n\t\t\t\t_config2.default.volume = _config2.default.volume - _config2.default.volume_increment;\n\t\t\t} else {\n\t\t\t\t_config2.default.volume = 0;\n\t\t\t}\n\n\t\t\t/*\n   \tCalls the core function to set the volume to the computed value\n   \tbased on the user's intent.\n   */\n\t\t\t_core2.default.setVolume(_config2.default.volume);\n\n\t\t\t/*\n   \tSyncs the volume sliders so the visuals align up with the functionality.\n   \tIf the volume is at 0, then the sliders should represent that so the user\n   \thas the right starting point.\n   */\n\t\t\t_visual2.default.syncVolumeSliders(_config2.default.volume);\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-song-slider'\n \t\tHandles a change on the song slider\n --------------------------------------------------------------------------*/\n\tsongSlider: function songSlider() {\n\t\t/*\n  \tGets the percentage of the song we will be setting the location for.\n  */\n\t\tvar locationPercentage = this.value;\n\n\t\t/*\n  \tChecks to see if the element has an attribute for amplitude-main-play-pause\n  \tand syncs accordingly\n  */\n\t\tif (this.getAttribute('amplitude-main-song-slider') != null) {\n\t\t\t/*\n   \tIf the active song is not live, set the current time\n   */\n\t\t\tif (!_config2.default.active_metadata.live) {\n\t\t\t\tvar currentTime = _config2.default.active_song.duration * (locationPercentage / 100);\n\n\t\t\t\tif (isFinite(currentTime)) {\n\t\t\t\t\t_config2.default.active_song.currentTime = currentTime;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_visual2.default.syncMainSliderLocation(locationPercentage);\n\n\t\t\tif (_config2.default.active_playlist != '' && _config2.default.active_playlist != null) {\n\t\t\t\t_visual2.default.syncPlaylistSliderLocation(_config2.default.active_playlist, locationPercentage);\n\t\t\t}\n\t\t}\n\n\t\t/*\n  \tSyncs playlist main play pause buttons\n  */\n\t\tif (this.getAttribute('amplitude-playlist-song-slider') != null) {\n\t\t\tvar playlist = this.getAttribute('amplitude-playlist');\n\n\t\t\t/*\n   \tWe don't want to song slide a playlist that's not the\n   \tactive placylist.\n   */\n\t\t\tif (_config2.default.active_playlist == playlist) {\n\t\t\t\t/*\n    \tIf the active song is not live, set the current time\n    */\n\t\t\t\tif (!_config2.default.active_metadata.live) {\n\t\t\t\t\t_config2.default.active_song.currentTime = _config2.default.active_song.duration * (locationPercentage / 100);\n\t\t\t\t}\n\t\t\t\t_visual2.default.syncMainSliderLocation(locationPercentage);\n\t\t\t\t_visual2.default.syncPlaylistSliderLocation(playlist, locationPercentage);\n\t\t\t}\n\t\t}\n\n\t\t/*\n  \tSyncs amplitude individual song buttons\n  */\n\t\tif (this.getAttribute('amplitude-playlist-song-slider') == null && this.getAttribute('amplitude-main-song-slider') == null) {\n\n\t\t\tvar playlist = this.getAttribute('amplitude-playlist');\n\t\t\tvar songIndex = this.getAttribute('amplitude-song-index');\n\n\t\t\tif (_config2.default.active_index == songIndex) {\n\t\t\t\t/*\n    \tIf the active song is not live, set the current time\n    */\n\t\t\t\tif (!_config2.default.active_metadata.live) {\n\t\t\t\t\t_config2.default.active_song.currentTime = _config2.default.active_song.duration * (locationPercentage / 100);\n\t\t\t\t}\n\n\t\t\t\t_visual2.default.syncMainSliderLocation();\n\n\t\t\t\tif (_config2.default.active_playlist != '' && _config2.default.active_playlist != null && _config2.default.active_playlist == playlist) {\n\t\t\t\t\t_visual2.default.syncPlaylistSliderLocation(playlist, location);\n\t\t\t\t}\n\n\t\t\t\t_visual2.default.syncSongSliderLocation(playlist, songIndex, location);\n\t\t\t}\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-volume-slider'\n \t\tHandles a change on the volume slider\n --------------------------------------------------------------------------*/\n\tvolumeSlider: function volumeSlider() {\n\t\t/*\n  \tCalls the core function to set the volume to the computed value\n  \tbased on the user's intent.\n  */\n\t\t_core2.default.setVolume(this.value);\n\n\t\t/*\n  \tSync the volume slider locations\n  */\n\t\t_visual2.default.syncVolumeSliderLocation(this.value);\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-next'\n \t\tHandles an event on the next button\n --------------------------------------------------------------------------*/\n\tnext: function next() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tChecks to see if the button is a playlist next button or\n   \tif it's a global playlist button.\n   */\n\t\t\tif (this.getAttribute('amplitude-playlist') == '' || this.getAttribute('amplitude-playlist') == null) {\n\n\t\t\t\t/*\n    \tCheck to see if the current state of the player\n    \tis in playlist mode or not playlist mode.\n    */\n\t\t\t\tif (_config2.default.active_playlist == '' || _config2.default.active_playlist == null) {\n\t\t\t\t\t_helpers2.default.setNext();\n\t\t\t\t} else {\n\t\t\t\t\t_helpers2.default.setNextPlaylist(_config2.default.active_playlist);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n    \tGets the playlist of the next button.\n    */\n\t\t\t\tvar playlist = this.getAttribute('amplitude-playlist');\n\n\t\t\t\t/*\n    \tSets the next playlist\n    */\n\t\t\t\t_helpers2.default.setNextPlaylist(playlist);\n\t\t\t}\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-prev'\n \t\tHandles an event on the previous button\n --------------------------------------------------------------------------*/\n\tprev: function prev() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tChecks to see if the previous button is a playlist previous\n   \tbutton or if it's a global playlist button.\n   */\n\t\t\tif (this.getAttribute('amplitude-playlist') == '' || this.getAttribute('amplitude-playlist') == null) {\n\n\t\t\t\t/*\n    \tCheck to see if the current playlist has been set\n    \tor null and set the previous song.\n    */\n\t\t\t\tif (_config2.default.active_playlist == '' || _config2.default.active_playlist == null) {\n\t\t\t\t\t_helpers2.default.setPrev();\n\t\t\t\t} else {\n\t\t\t\t\t_helpers2.default.setPrevPlaylist(_config2.default.active_playlist);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n    \tGets the playlist of the previous button.\n    */\n\t\t\t\tvar playlist = this.getAttribute('amplitude-playlist');\n\n\t\t\t\t/*\n    \tSets the previous playlist\n    */\n\t\t\t\t_helpers2.default.setPrevPlaylist(playlist);\n\t\t\t}\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-shuffle'\n \t\tHandles an event on the shuffle button\n --------------------------------------------------------------------------*/\n\tshuffle: function shuffle() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tCheck to see if the shuffle button belongs to a playlist\n   */\n\t\t\tif (this.getAttribute('amplitude-playlist') == '' || this.getAttribute('amplitude-playlist') == null) {\n\t\t\t\t/*\n    \tSets the shuffle button to null\n    */\n\t\t\t\t_helpers2.default.setShuffle(null);\n\t\t\t} else {\n\t\t\t\t/*\n    \tGets the playlist attribute of the shuffle button and\n    \tset shuffle to on for the playlist.\n    */\n\t\t\t\tvar playlist = this.getAttribute('amplitude-playlist');\n\t\t\t\t_helpers2.default.setShuffle(playlist);\n\t\t\t}\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-repeat'\n \t\tHandles an event on the repeat button\n --------------------------------------------------------------------------*/\n\trepeat: function repeat() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tSets repeat to the opposite of what it was set to\n   */\n\t\t\t_helpers2.default.setRepeat(!_config2.default.repeat);\n\n\t\t\t/*\n   \tVisually sync repeat\n   */\n\t\t\t_visual2.default.syncRepeat();\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-playback-speed'\n \t\tHandles an event on the playback speed button\n --------------------------------------------------------------------------*/\n\tplaybackSpeed: function playbackSpeed() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tWe increment the speed by .5 everytime we click\n   \tthe button to change the playback speed. Once we are\n   \tactively playing back at 2, we start back at 1 which\n   \tis normal speed.\n   */\n\t\t\tswitch (_config2.default.playback_speed) {\n\t\t\t\tcase 1:\n\t\t\t\t\t_helpers2.default.setPlaybackSpeed(1.5);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1.5:\n\t\t\t\t\t_helpers2.default.setPlaybackSpeed(2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t_helpers2.default.setPlaybackSpeed(1);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/*\n   \tVisually sync the playback speed.\n   */\n\t\t\t_visual2.default.syncPlaybackSpeed();\n\t\t}\n\t},\n\n\t/*--------------------------------------------------------------------------\n \tHANDLER FOR: 'amplitude-skip-to'\n \t\tHandles an event on a skip to button.\n --------------------------------------------------------------------------*/\n\tskipTo: function skipTo() {\n\t\tif (!_config2.default.is_touch_moving) {\n\t\t\t/*\n   \tDetermines if the skip to button is in the scope of a playlist.\n   */\n\t\t\tif (this.hasAttribute('amplitude-playlist')) {\n\t\t\t\tvar playlist = this.getAttribute('amplitude-playlist');\n\n\t\t\t\tif (_helpers4.default.checkNewPlaylist(playlist)) {\n\t\t\t\t\t_helpers4.default.setActivePlaylist(playlist);\n\t\t\t\t}\n\t\t\t\t/*\n    \tGets the location, playlist and song index that is being skipped\n    \tto.\n    */\n\t\t\t\tvar location = parseInt(this.getAttribute('amplitude-location'));\n\t\t\t\tvar playlist = this.getAttribute('amplitude-playlist');\n\t\t\t\tvar songIndex = parseInt(this.getAttribute('amplitude-song-index'));\n\n\t\t\t\t/*\n    \tChanges the song to where it's being skipped and then\n    \tplay the song.\n    */\n\t\t\t\t_helpers4.default.changeSong(songIndex);\n\t\t\t\t_core2.default.play();\n\n\t\t\t\t/*\n    \tSkip to the location in the song.\n    */\n\t\t\t\t_core2.default.skipToLocation(location);\n\t\t\t} else {\n\t\t\t\t/*\n    \tGets the location and song index that is being skipped\n    \tto.\n    */\n\t\t\t\tvar location = parseInt(this.getAttribute('amplitude-location'));\n\t\t\t\tvar songIndex = parseInt(this.getAttribute('amplitude-song-index'));\n\n\t\t\t\t/*\n    \tChanges the song to where it's being skipped and then\n    \tplay the song.\n    */\n\t\t\t\t_helpers4.default.changeSong(songIndex);\n\t\t\t\t_core2.default.play();\n\n\t\t\t\t/*\n    \tSkip to the location in the song.\n    */\n\t\t\t\t_core2.default.skipToLocation(location);\n\t\t\t}\n\t\t}\n\t}\n};\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _init = __webpack_require__(6);\n\nvar _init2 = _interopRequireDefault(_init);\n\nvar _core = __webpack_require__(3);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _helpers = __webpack_require__(1);\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _events = __webpack_require__(4);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _helpers3 = __webpack_require__(5);\n\nvar _helpers4 = _interopRequireDefault(_helpers3);\n\nvar _visual = __webpack_require__(2);\n\nvar _visual2 = _interopRequireDefault(_visual);\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*\n                                                                                                                                                                                                                  \tAmplitude.js\n                                                                                                                                                                                                                  \tVersion: \t3.1.0\n                                                                                                                                                                                                                  \tAuthor: \tDan Pastori\n                                                                                                                                                                                                                  \tCompany: \t521 Dimensions\n                                                                                                                                                                                                                  */\n\n\n/*\n\tAmplitude should just be an interface to the public functions.\n\tEverything else should be handled by other objects\n*/\n\nvar Amplitude = function () {\n\tvar _ref;\n\n\t/*--------------------------------------------------------------------------\n \tThe main init function.  The user will call this through \n \tAmplitude.init({}) and pass in their settings.\n \t\n \tPublic Accessor: Amplitude.init( user_config_json );\n \t \t@param user_config A JSON object of user defined values that help \n  \tconfigure and initialize AmplitudeJS.\n --------------------------------------------------------------------------*/\n\tfunction init(userConfig) {\n\t\t_init2.default.initialize(userConfig);\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tBinds new elements that were added to the page.\n --------------------------------------------------------------------------*/\n\tfunction bindNewElements() {\n\t\t_init2.default.rebindDisplay();\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tReturns the active playlist\n --------------------------------------------------------------------------*/\n\tfunction getActivePlaylist() {\n\t\treturn _config2.default.active_playlist;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tReturns the current playback speed\n --------------------------------------------------------------------------*/\n\tfunction getPlaybackSpeed() {\n\t\treturn _config2.default.playback_speed;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tGets the repeat state of the player.\n --------------------------------------------------------------------------*/\n\tfunction getRepeat() {\n\t\treturn _config2.default.repeat;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tReturns the shuffle state of the player.\n --------------------------------------------------------------------------*/\n\tfunction getShuffle() {\n\t\treturn _config2.default.shuffle_on;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tReturns the shuffle state of the playlist.\n \t\t@param playlist The key representing the playlist ID to see if it's shuffled\n \tor not.\n --------------------------------------------------------------------------*/\n\tfunction getShufflePlaylist(playlist) {\n\t\treturn _config2.default.shuffled_statuses[playlist];\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tGets the default album art for the player\n --------------------------------------------------------------------------*/\n\tfunction getDefaultAlbumArt() {\n\t\treturn _config2.default.default_album_art;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets the default album art for the player\n \t\t@param url A string representing the URL of the new default album art.\n --------------------------------------------------------------------------*/\n\tfunction setDefaultAlbumArt(url) {\n\t\t_config2.default.default_album_art = url;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tAllows the user to get the percentage of the song played.\n \t\n \tPublic Accessor: Amplitude.getSongPlayedPercentage();\n --------------------------------------------------------------------------*/\n\tfunction getSongPlayedPercentage() {\n\t\t/*\n  \tReturns the percentage of the song played.\n  */\n\t\treturn _config2.default.active_song.currentTime / _config2.default.active_song.duration * 100;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tAllows the user to set how far into the song they want to be. This is\n \thelpful for implementing custom range sliders\n \t\n \tPublic Accessor: Amplitude.setSongPlayedPercentage( float );\n \t\n  \t@param Float percentage The percentage of the song played\n --------------------------------------------------------------------------*/\n\tfunction setSongPlayedPercentage(percentage) {\n\t\t/*\n  \tEnsures the percentage is a number and is between 0 and 100.\n  */\n\t\tif (typeof percentage == 'number' && percentage > 0 && percentage < 100) {\n\t\t\t/*\n   \tSets the current time of the song to the percentage.\n   */\n\t\t\t_config2.default.active_song.currentTime = _config2.default.active_song.duration * (percentage / 100);\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tAllows the user to turn on debugging.\n \t\n \tPublic Accessor: Amplitude.setDebug( bool );\n \t\n  \t@param BOOL state Turns debugging on and off.\n --------------------------------------------------------------------------*/\n\tfunction setDebug(state) {\n\t\t/*\n  \tSets the global config debug on or off.\n  */\n\t\t_config2.default.debug = state;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tReturns the active song meta data for the user to do what is \n \tneeded.\n \t\n \tPublic Accessor: Amplitude.getActiveSongMetadata();\n \t\n  \t@returns JSON Object with the active song information\n --------------------------------------------------------------------------*/\n\tfunction getActiveSongMetadata() {\n\t\treturn _config2.default.active_metadata;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tReturns a song in the songs array at that index\n \t\n \tPublic Accessor: Amplitude.getSongByIndex( song_index )\n \t\t@param int index The integer for the index of the\n \tsong in the songs array.\n \t\t@returns JSON representation for the song at a specific index.\n --------------------------------------------------------------------------*/\n\tfunction getSongByIndex(index) {\n\t\treturn _config2.default.songs[index];\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tReturns a song at a playlist index\n \t\n \tPublic Accessor: Amplitude.getSongAtPlaylistIndex( playlist, index \n \t\t@param \tint \tindex The integer for the index of the\n \tsong in the playlist.\n \t\t@param \tstring\tplaylist The key of the playlist we are getting the song\n \tat the index for\n \t\t@returns JSON representation for the song at a specific index.\n --------------------------------------------------------------------------*/\n\tfunction getSongAtPlaylistIndex(playlist, index) {\n\t\tvar songIndex = _config2.default.playlists[playlist][index];\n\n\t\treturn _config2.default.songs[songIndex];\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tAdds a song to the end of the config array.  This will allow Amplitude\n \tto play the song in a playlist type setting.\n \t\n \tPublic Accessor: Amplitude.addSong( song_json )\n \t\t@param song JSON representation of a song.\n \t\t@returns int New index of the song.\n --------------------------------------------------------------------------*/\n\tfunction addSong(song) {\n\t\t_config2.default.songs.push(song);\n\t\treturn _config2.default.songs.length - 1;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tWhen you pass a song object it plays that song right awawy.  It sets\n \tthe active song in the config to the song you pass in and synchronizes\n \tthe visuals.\n \t\n \tPublic Accessor: Amplitude.playNow( song )\n \t\t@param song JSON representation of a song.\n --------------------------------------------------------------------------*/\n\tfunction playNow(song) {\n\t\t_core2.default.playNow(song);\n\t}\n\n\t/*\n \tTODO: Implement Add Song To Playlist Functionality\n */\n\tfunction addSongToPlaylist(song, playlist) {}\n\n\t/*--------------------------------------------------------------------------\n \tAllows the user to play whatever the active song is directly\n \tthrough Javascript. Normally ALL of Amplitude functions that access\n \tthe core features are called through event handlers.\n \t\tPublic Accessor: Amplitude.play();\n --------------------------------------------------------------------------*/\n\tfunction play() {\n\t\t_core2.default.play();\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tAllows the user to pause whatever the active song is directly\n \tthrough Javascript. Normally ALL of Amplitude functions that access\n \tthe core features are called through event handlers. \n \t\tPublic Accessor: Amplitude.pause();\n --------------------------------------------------------------------------*/\n\tfunction pause() {\n\t\t_core2.default.pause();\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tReturns the audio object used to play the audio\n \t\tPublic Accessor: Amplitude.getAudio();\n --------------------------------------------------------------------------*/\n\tfunction getAudio() {\n\t\treturn _config2.default.active_song;\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tPlays the next song either in the playlist or globally.\n \t\tPublic Accessor: Amplitude.next( playlist );\n \t\t@param \tstring \tplaylist The playlist key\n --------------------------------------------------------------------------*/\n\tfunction next() {\n\t\tvar playlist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n\t\t/*\n  \tIf the playlist is empty or null, then we check the active\n  \tplaylist\n  */\n\t\tif (playlist == '' || playlist == null) {\n\t\t\t/*\n   \tIf the active playlist is null, then we set the next global\n   \tsong or we set the next in the playlist.\n   */\n\t\t\tif (_config2.default.active_playlist == null || _config2.default.active_playlist == '') {\n\t\t\t\t_helpers4.default.setNext();\n\t\t\t} else {\n\t\t\t\t_helpers4.default.setNextPlaylist(_config2.default.active_playlist);\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n   \tSet the next in the playlist for the key provided.\n   */\n\t\t\t_helpers4.default.setNextPlaylist(playlist);\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tPlays the prev song either in the playlist or globally.\n \t\tPublic Accessor: Amplitude.prev( playlist );\n \t\t@param \tstring \tplaylist The playlist key\n --------------------------------------------------------------------------*/\n\tfunction prev() {\n\t\tvar playlist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n\t\t/*\n  \tIf the playlist is empty or null, then we check the active\n  \tplaylist\n  */\n\t\tif (playlist == '' || playlist == null) {\n\t\t\t/*\n   \tIf the active playlist is null, then we set the prev global\n   \tsong or we set the prev in the playlist.\n   */\n\t\t\tif (_config2.default.active_playlist == null || _config2.default.active_playlist == '') {\n\t\t\t\t_helpers4.default.setPrev();\n\t\t\t} else {\n\t\t\t\t_helpers4.default.setPrevPlaylist(_config2.default.active_playlist);\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n   \tSet the prev in the playlist for the key provided.\n   */\n\t\t\t_helpers4.default.setPrevPlaylist(playlist);\n\t\t}\n\t}\n\n\t/*\n \tReturns all of the publically accesible methods.\n */\n\treturn _ref = {\n\t\tinit: init,\n\t\tbindNewElements: bindNewElements,\n\t\tgetActivePlaylist: getActivePlaylist,\n\t\tgetPlaybackSpeed: getPlaybackSpeed,\n\t\tgetRepeat: getRepeat,\n\t\tgetShuffle: getShuffle,\n\t\tgetShufflePlaylist: getShufflePlaylist,\n\t\tgetDefaultAlbumArt: getDefaultAlbumArt,\n\t\tsetDefaultAlbumArt: setDefaultAlbumArt,\n\t\tgetSongPlayedPercentage: getSongPlayedPercentage,\n\t\tsetSongPlayedPercentage: setSongPlayedPercentage,\n\t\tsetDebug: setDebug,\n\t\tgetActiveSongMetadata: getActiveSongMetadata,\n\t\tgetSongByIndex: getSongByIndex,\n\t\tgetSongAtPlaylistIndex: getSongAtPlaylistIndex,\n\t\taddSong: addSong,\n\t\tplayNow: playNow,\n\t\tplay: play,\n\t\tpause: pause\n\t}, _defineProperty(_ref, 'addSong', addSong), _defineProperty(_ref, 'audio', getAudio), _defineProperty(_ref, 'next', next), _defineProperty(_ref, 'prev', prev), _ref;\n}();\n\nexports.default = Amplitude;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _helpers = __webpack_require__(1);\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _init = __webpack_require__(6);\n\nvar _init2 = _interopRequireDefault(_init);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n|----------------------------------------------------------------------------------------------------\n| SOUNDCLOUD\n|----------------------------------------------------------------------------------------------------\n| These helpers wrap around the basic methods of the Soundcloud API\n| and get the information we need from SoundCloud to make the songs\n| streamable through Amplitude\n*/\nvar AmplitudeSoundcloud = function () {\n\t/*\n \tDefines the temp user config\n */\n\tvar tempUserConfig = {};\n\n\t/*--------------------------------------------------------------------------\n \tLoads the soundcloud SDK for use with Amplitude so the user doesn't have\n \tto load it themselves.\n \tWith help from: http://stackoverflow.com/questions/950087/include-a-javascript-file-in-another-javascript-file\n --------------------------------------------------------------------------*/\n\tfunction loadSoundCloud(userConfig) {\n\t\ttempUserConfig = userConfig;\n\n\t\tvar head = document.getElementsByTagName('head')[0];\n\t\tvar script = document.createElement('script');\n\n\t\tscript.type = 'text/javascript';\n\t\t/*\n  \tURL to the remote soundcloud SDK\n  */\n\t\tscript.src = 'https://connect.soundcloud.com/sdk.js';\n\t\tscript.onreadystatechange = initSoundcloud;\n\t\tscript.onload = initSoundcloud;\n\n\t\thead.appendChild(script);\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tInitializes soundcloud with the key provided.\n --------------------------------------------------------------------------*/\n\tfunction initSoundcloud() {\n\t\t/*\n  \tCalls the SoundCloud initialize function\n  \tfrom their API and sends it the client_id\n  \tthat the user passed in.\n  */\n\t\tSC.initialize({\n\t\t\tclient_id: _config2.default.soundcloud_client\n\t\t});\n\n\t\t/*\n  \tGets the streamable URLs to run through Amplitue. This is\n  \tVERY important since Amplitude can't stream the copy and pasted\n  \tlink from the SoundCloud page, but can resolve the streaming\n  \tURLs from the link.\n  */\n\t\tgetStreamableURLs();\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tGets the streamable URL from the URL provided for\n \tall of the soundcloud links.  This will loop through\n \tand set all of the information for the soundcloud\n \turls.\n --------------------------------------------------------------------------*/\n\tfunction getStreamableURLs() {\n\t\tvar soundcloud_regex = /^https?:\\/\\/(soundcloud.com|snd.sc)\\/(.*)$/;\n\n\t\tfor (var i = 0; i < _config2.default.songs.length; i++) {\n\t\t\t/*\n   \tIf the URL matches soundcloud, we grab\n   \tthat url and get the streamable link\n   \tif there is one.\n   */\n\t\t\tif (_config2.default.songs[i].url.match(soundcloud_regex)) {\n\t\t\t\t_config2.default.soundcloud_song_count++;\n\t\t\t\tresolveStreamable(_config2.default.songs[i].url, i);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tDue to Soundcloud SDK being asynchronous, we need to scope the\n \tindex of the song in another function. The privateGetSoundcloudStreamableURLs\n \tfunction does the actual iteration and scoping.\n --------------------------------------------------------------------------*/\n\tfunction resolveStreamable(url, index) {\n\t\tSC.get('/resolve/?url=' + url, function (sound) {\n\t\t\t/*\n   \tIf streamable we get the url and bind the client ID to the end\n   \tso Amplitude can just stream the song normally. We then overwrite\n   \tthe url the user provided with the streamable URL.\n   */\n\t\t\tif (sound.streamable) {\n\t\t\t\t_config2.default.songs[index].url = sound.stream_url + '?client_id=' + _config2.default.soundcloud_client;\n\n\t\t\t\t/*\n    \tIf the user want's to use soundcloud art, we overwrite the\n    \tcover_art_url with the soundcloud artwork url.\n    */\n\t\t\t\tif (_config2.default.soundcloud_use_art) {\n\t\t\t\t\t_config2.default.songs[index].cover_art_url = sound.artwork_url;\n\t\t\t\t}\n\n\t\t\t\t/*\n    \tGrab the extra metadata from soundcloud and bind it to the\n    \tsong.  The user can get this through the public function:\n    \tgetActiveSongMetadata\n    */\n\t\t\t\t_config2.default.songs[index].soundcloud_data = sound;\n\t\t\t} else {\n\t\t\t\t/*\n    \tIf not streamable, then we print a message to the user stating\n    \tthat the song with name X and artist X is not streamable. This\n    \tgets printed ONLY if they have debug turned on.\n    */\n\t\t\t\t_helpers2.default.writeDebugMessage(_config2.default.songs[index].name + ' by ' + _config2.default.songs[index].artist + ' is not streamable by the Soundcloud API');\n\t\t\t}\n\t\t\t/*\n   \tIncrements the song ready counter.\n   */\n\t\t\t_config2.default.soundcloud_songs_ready++;\n\n\t\t\t/*\n   \tWhen all songs are accounted for, then amplitude is ready\n   \tto rock and we set the rest of the config.\n   */\n\t\t\tif (_config2.default.soundcloud_songs_ready == _config2.default.soundcloud_song_count) {\n\t\t\t\t_init2.default.setConfig(tempUserConfig);\n\t\t\t}\n\t\t});\n\t}\n\n\t/*\n \tReturns the publically accessible methods\n */\n\treturn {\n\t\tloadSoundCloud: loadSoundCloud\n\t};\n}();\n\nexports.default = AmplitudeSoundcloud;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n|-------------------------------------------------------------------------------\n| VISUAL SYNC HELPER METHODS\n|-------------------------------------------------------------------------------\n| These methods help sync visual displays. They essentially make the visual sync \n| methods smaller and more maintainable.\n|\n| METHODS\n|\tsyncCurrentHours( hours )\n|\tresetCurrentHours()\n|\tsyncCurrentMinutes( minutes )\n|\tresetCurrentMinutes()\n|\tsyncCurrentSeconds( seconds )\n|\tresetCurrentSeconds()\n|\tsyncCurrentTime( currentTime )\n|\tresetCurrentTime()\n|\tsyncSongTimeVisualizations( songPlayedPercentage )\n|\tsyncMainSongTimeVisualizations( songPlayedPercentage )\n|\tsyncPlaylistSongTimeVisualizations( songPlayedPercentage )\n|\tsyncIndividualSongTimeVisualizations( songPlayedPercentage )\n|\tsetElementPlay( element )\n|\tsetElementPause( element )\n*/\nvar AmplitudeVisualSyncHelpers = function () {\n\t/*--------------------------------------------------------------------------\n \tUpdates any elements that display the current hour for the song.\n \t\t@param int hours An integer conaining how many hours into\n \tthe song.\n --------------------------------------------------------------------------*/\n\tfunction syncCurrentHours(hours) {\n\t\t/*\n  \tGets all of the song hour selectors.\n  */\n\t\tif (_config2.default.active_playlist != null && _config2.default.active_playlist != '') {\n\t\t\tvar hourSelectors = ['.amplitude-current-hours[amplitude-main-current-hours=\"true\"]', '.amplitude-current-hours[amplitude-playlist-current-hours=\"true\"][amplitude-playlist=\"' + _config2.default.active_playlist + '\"]', '.amplitude-current-hours[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t} else {\n\t\t\tvar hourSelectors = ['.amplitude-current-hours[amplitude-main-current-hours=\"true\"]', '.amplitude-current-hours[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t}\n\n\t\t/*\n  \tEnsures that there are some hour selectors.\n  */\n\t\tif (document.querySelectorAll(hourSelectors.join()).length > 0) {\n\t\t\t/*\n   \tGet all of the hour selectors\n   */\n\t\t\tvar currentHourSelectors = document.querySelectorAll(hourSelectors.join());\n\n\t\t\t/*\n   \tSet the current hour selector's inner html to hours passed in.\n   */\n\t\t\tfor (var i = 0; i < currentHourSelectors.length; i++) {\n\t\t\t\t/*\n    \tIf the selector is a main selector, we set the hours.\n    */\n\t\t\t\tif (currentHourSelectors[i].getAttribute('amplitude-main-current-hours') == 'true') {\n\t\t\t\t\tcurrentHourSelectors[i].innerHTML = hours;\n\t\t\t\t} else {\n\t\t\t\t\t/*\n     \tIf the active playlist is not null or empty\n     \tand the attribute of the playlist is equal to the\n     \tactive playlist, then we set the inner html.\n     */\n\t\t\t\t\tif (_config2.default.active_playlist != '' && _config2.default.active_playlist != null && currentHourSelectors[i].getAttribute('amplitude-playlist') == _config2.default.active_playlist) {\n\t\t\t\t\t\tcurrentHourSelectors[i].innerHTML = hours;\n\t\t\t\t\t\t/*\n      \tIf the active playlist is not set and the selector\n      \tdoes not have a playlist then we set the hours. This\n      \tmeans that the current selector is an individual song\n      \tselector.\n      */\n\t\t\t\t\t} else if (_config2.default.active_playlist == '' || _config2.default.active_playlist == null && !currentHourSelectors[i].hasAttribute('amplitude-playlist')) {\n\t\t\t\t\t\tcurrentHourSelectors[i].innerHTML = hours;\n\t\t\t\t\t\t/*\n      \tIf nothing else matches, set the selector's inner HTML to '00'\n      */\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentHourSelectors[i].innerHTML = '00';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tResets the current hours displays to 00\n --------------------------------------------------------------------------*/\n\tfunction resetCurrentHours() {\n\t\t/*\n  \tGets the hour display elements\n  */\n\t\tvar hourSelectors = document.querySelectorAll('.amplitude-current-hours');\n\n\t\t/*\n  \tIterates over all of the hour selectors and sets the inner HTML\n  \tto 00.\n  */\n\t\tfor (var i = 0; i < hourSelectors.length; i++) {\n\t\t\thourSelectors[i].innerHTML = '00';\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tUpdates any elements that display the current minutes for the song.\n \t\t@param int minutes An integer conaining how many minutes into\n \tthe song.\n --------------------------------------------------------------------------*/\n\tfunction syncCurrentMinutes(minutes) {\n\t\t/*\n  \tGets all of the song minute selectors.\n  */\n\t\tif (_config2.default.active_playlist != null && _config2.default.active_playlist != '') {\n\t\t\tvar minuteSelectors = ['.amplitude-current-minutes[amplitude-main-current-minutes=\"true\"]', '.amplitude-current-minutes[amplitude-playlist-current-minutes=\"true\"][amplitude-playlist=\"' + _config2.default.active_playlist + '\"]', '.amplitude-current-minutes[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t} else {\n\t\t\tvar minuteSelectors = ['.amplitude-current-minutes[amplitude-main-current-minutes=\"true\"]', '.amplitude-current-minutes[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t}\n\n\t\tvar currentMinuteSelectors = document.querySelectorAll(minuteSelectors.join());\n\n\t\t/*\n  \tSet the current minute selector's inner html to minutes passed in.\n  */\n\t\tfor (var i = 0, l = currentMinuteSelectors.length; i < l; i++) {\n\t\t\t/*\n   \tIf the selector is a main selector, we set the seconds.\n   */\n\t\t\tif (currentMinuteSelectors[i].getAttribute('amplitude-main-current-minutes') == 'true') {\n\t\t\t\tcurrentMinuteSelectors[i].innerHTML = minutes;\n\t\t\t} else {\n\t\t\t\t/*\n    \tIf the active playlist is not null or empty\n    \tand the attribute of the playlist is equal to the\n    \tactive playlist, then we set the inner html.\n    */\n\t\t\t\tif (_config2.default.active_playlist != '' && _config2.default.active_playlist != null && currentMinuteSelectors[i].getAttribute('amplitude-playlist') == _config2.default.active_playlist) {\n\t\t\t\t\tcurrentMinuteSelectors[i].innerHTML = minutes;\n\t\t\t\t\t/*\n     \tIf the active playlist is not set and the selector\n     \tdoes not have a playlist then we set the minutes. This\n     \tmeans that the current selector is an individual song\n     \tselector.\n     */\n\t\t\t\t} else if (_config2.default.active_playlist == '' || _config2.default.active_playlist == null && !currentMinuteSelectors[i].hasAttribute('amplitude-playlist')) {\n\t\t\t\t\tcurrentMinuteSelectors[i].innerHTML = minutes;\n\t\t\t\t\t/*\n     \tIf nothing else matches, set the selector's inner HTML to '00'\n     */\n\t\t\t\t} else {\n\t\t\t\t\tcurrentMinuteSelectors[i].innerHTML = '00';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tResets the current minutes displays to 00\n --------------------------------------------------------------------------*/\n\tfunction resetCurrentMinutes() {\n\t\t/*\n  \tGets the minutes display elements\n  */\n\t\tvar minuteSelectors = document.querySelectorAll('.amplitude-current-minutes');\n\n\t\t/*\n  \tIterates over all of the minute selectors and sets the inner HTML\n  \tto 00.\n  */\n\t\tfor (var i = 0; i < minuteSelectors.length; i++) {\n\t\t\tminuteSelectors[i].innerHTML = '00';\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tUpdates any elements that display the current seconds for the song.\n \t\t@param int minutes An integer conaining how many seconds into\n \tthe song.\n --------------------------------------------------------------------------*/\n\tfunction syncCurrentSeconds(seconds) {\n\t\t/*\n  \tGets all of the song second selectors. If the active playlist\n  \tis not null, then we get the playlist selectors.\n  */\n\t\tif (_config2.default.active_playlist != null && _config2.default.active_playlist != '') {\n\t\t\tvar secondSelectors = ['.amplitude-current-seconds[amplitude-main-current-seconds=\"true\"]', '.amplitude-current-seconds[amplitude-playlist-current-seconds=\"true\"][amplitude-playlist=\"' + _config2.default.active_playlist + '\"]', '.amplitude-current-seconds[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t} else {\n\t\t\tvar secondSelectors = ['.amplitude-current-seconds[amplitude-main-current-seconds=\"true\"]', '.amplitude-current-seconds[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t}\n\n\t\t/*\n  \tGet all of the second selectors\n  */\n\t\tvar currentSecondSelectors = document.querySelectorAll(secondSelectors.join());\n\n\t\t/*\n  \tIterate over all of the second selectors.\n  */\n\t\tfor (var i = 0, l = currentSecondSelectors.length; i < l; i++) {\n\t\t\t/*\n   \tIf the selector is a main selector, we set the seconds.\n   */\n\t\t\tif (currentSecondSelectors[i].getAttribute('amplitude-main-current-seconds') == 'true') {\n\t\t\t\tcurrentSecondSelectors[i].innerHTML = seconds;\n\t\t\t} else {\n\t\t\t\t/*\n    \tIf the active playlist is not null or empty\n    \tand the attribute of the playlist is equal to the\n    \tactive playlist, then we set the inner html.\n    */\n\t\t\t\tif (_config2.default.active_playlist != '' && _config2.default.active_playlist != null && currentSecondSelectors[i].getAttribute('amplitude-playlist') == _config2.default.active_playlist) {\n\t\t\t\t\tcurrentSecondSelectors[i].innerHTML = seconds;\n\t\t\t\t\t/*\n     \tIf the active playlist is not set and the selector\n     \tdoes not have a playlist then we set the seconds. This\n     \tmeans that the current selector is an individual song\n     \tselector.\n     */\n\t\t\t\t} else if (_config2.default.active_playlist == '' || _config2.default.active_playlist == null && !currentSecondSelectors[i].hasAttribute('amplitude-playlist')) {\n\t\t\t\t\tcurrentSecondSelectors[i].innerHTML = seconds;\n\t\t\t\t\t/*\n     \tIf nothing else matches, set the selector's inner HTML to '00'\n     */\n\t\t\t\t} else {\n\t\t\t\t\tcurrentSecondSelectors[i].innerHTML = '00';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tResets the current seconds displays to 00\n --------------------------------------------------------------------------*/\n\tfunction resetCurrentSeconds() {\n\t\t/*\n  \tGets the seconds display elements\n  */\n\t\tvar secondSelectors = document.querySelectorAll('.amplitude-current-seconds');\n\n\t\t/*\n  \tIterates over all of the seconds selectors and sets the inner HTML\n  \tto 00.\n  */\n\t\tfor (var i = 0; i < secondSelectors.length; i++) {\n\t\t\tsecondSelectors[i].innerHTML = '00';\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tUpdates any elements that display the current time for the song. This\n \tis a computed field that will be commonly used.\n \t\t@param JSON currentTime A json object conaining the parts for the\n \tcurrent time for the song.\n --------------------------------------------------------------------------*/\n\tfunction syncCurrentTime(currentTime) {\n\t\t/*\n  \tGets all of the song time selectors.\n  */\n\t\tvar timeSelectors = ['.amplitude-current-time[amplitude-main-current-time=\"true\"]', '.amplitude-current-time[amplitude-playlist-main-current-time=\"' + _config2.default.active_playlist + '\"]', '.amplitude-current-time[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\n\t\t/*\n  \tGet all of the time selectors.\n  */\n\t\tvar currentTimeSelectors = document.querySelectorAll(timeSelectors.join());\n\n\t\t/*\n  \tSet the time selector's inner html to the current time for the song. The current\n  \ttime is computed by joining minutes and seconds.\n  */\n\t\tfor (var i = 0, l = currentTimeSelectors.length; i < l; i++) {\n\t\t\tcurrentTimeSelectors[i].innerHTML = currentTime.minutes + ':' + currentTime.seconds;\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tResets the current time displays to 00:00\n --------------------------------------------------------------------------*/\n\tfunction resetCurrentTime() {\n\t\t/*\n  \tGets the time selector display elements\n  */\n\t\tvar timeSelectors = document.querySelectorAll('.amplitude-current-time');\n\n\t\t/*\n  \tIterates over all of the time selectors and sets the inner HTML\n  \tto 00.\n  */\n\t\tfor (var i = 0; i < timeSelectors.length; i++) {\n\t\t\ttimeSelectors[i].innerHTML = '00:00';\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tUpdates all of the song time visualizaitons which are an expanding\n \telement that displays the percentage of the song that has been played.\n \t\t@param float songPlayedPercentage The percentage of the song that\n \thas been played.\n --------------------------------------------------------------------------*/\n\tfunction syncSongTimeVisualizations(songPlayedPercentage) {\n\t\tsyncMainSongTimeVisualizations(songPlayedPercentage);\n\t\tsyncPlaylistSongTimeVisualizations(songPlayedPercentage);\n\t\tsyncIndividualSongTimeVisualizations(songPlayedPercentage);\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tUpdates all of the main song time visualizaitons which are an expanding\n \telement that displays the percentage of the song that has been played.\n \t\t@param float songPlayedPercentage The percentage of the song that\n \thas been played.\n --------------------------------------------------------------------------*/\n\tfunction syncMainSongTimeVisualizations(songPlayedPercentage) {\n\t\t/*\n  \tGet all of the main song time visualizations\n  */\n\t\tvar mainSongTimeVisualizations = document.querySelectorAll('.amplitude-song-time-visualization[amplitude-main-song-time-visualization=\"true\"]');\n\n\t\t/*\n  \tIterate over all of the main song time visualizations setting\n  \tthe internal div to be the percentage of the parent container\n  \tequivalent to the percentage of the song played.\n  */\n\t\tfor (var i = 0; i < mainSongTimeVisualizations.length; i++) {\n\t\t\t/*\n   \tGet the song time visualization status and the visualization\n   \twidth. Calculate the computed width of the song as a percentage\n   \tof the player width and song played.\n   */\n\t\t\tvar songTimeVisualizationStatus = mainSongTimeVisualizations[i].querySelectorAll('.amplitude-song-time-visualization-status');\n\t\t\tvar visualizationWidth = mainSongTimeVisualizations[i].offsetWidth;\n\t\t\tvar computedWidth = visualizationWidth * (songPlayedPercentage / 100);\n\n\t\t\t/*\n   \tSet the inner element width to the computed width. This allows for the user\n   \tto define the width of the outer element and this will fill proportionally.\n   */\n\t\t\tsongTimeVisualizationStatus[0].setAttribute('style', 'width: ' + computedWidth + 'px');\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tUpdates all of the playlist song time visualizaitons which are an expanding\n \telement that displays the percentage of the song that has been played.\n \t\t@param float songPlayedPercentage The percentage of the song that\n \thas been played.\n --------------------------------------------------------------------------*/\n\tfunction syncPlaylistSongTimeVisualizations(songPlayedPercentage) {\n\t\t/*\n  \tGet all of the playlist song time visualizations\n  */\n\t\tvar playlistSongTimeVisualizations = document.querySelectorAll('.amplitude-song-time-visualization[amplitude-playlist-song-time-visualization=\"true\"][amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n\t\t/*\n  \tIterate over all of the main song time visualizations setting\n  \tthe internal div to be the percentage of the parent container\n  \tequivalent to the percentage of the song played.\n  */\n\t\tfor (var i = 0; i < playlistSongTimeVisualizations.length; i++) {\n\t\t\t/*\n   \tGet the song time visualization status and the visualization\n   \twidth. Calculate the computed width of the song as a percentage\n   \tof the player width and song played.\n   */\n\t\t\tvar songTimeVisualizationStatus = playlistSongTimeVisualizations[i].querySelectorAll('.amplitude-song-time-visualization-status');\n\t\t\tvar visualizationWidth = playlistSongTimeVisualizations[i].offsetWidth;\n\t\t\tvar computedWidth = visualizationWidth * (songPlayedPercentage / 100);\n\n\t\t\t/*\n   \tSet the inner element width to the computed width. This allows for the user\n   \tto define the width of the outer element and this will fill proportionally.\n   */\n\t\t\tsongTimeVisualizationStatus[0].setAttribute('style', 'width: ' + computedWidth + 'px');\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tUpdates all of the individual song time visualizaitons which are an expanding\n \telement that displays the percentage of the song that has been played.\n \t\t@param float songPlayedPercentage The percentage of the song that\n \thas been played.\n --------------------------------------------------------------------------*/\n\tfunction syncIndividualSongTimeVisualizations(songPlayedPercentage) {\n\t\t/*\n  \tIf the active playlist is not null, we get the individual song\n  \ttime visualizations for the playlist.\n  */\n\t\tif (_config2.default.active_playlist != '' && _config2.default.active_playlist != null) {\n\t\t\t/*\n   \tGet all of the individual song time visualizations that correspond\n   \tto a playlist\n   */\n\t\t\tvar songTimeVisualizations = document.querySelectorAll('.amplitude-song-time-visualization[amplitude-playlist=\"' + _config2.default.active_playlist + '\"][amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n\t\t\t/*\n   \tIterate over all of the individual song time visualizations setting\n   \tthe internal div to be the percentage of the parent container\n   \tequivalent to the percentage of the song played.\n   */\n\t\t\tfor (var i = 0; i < songTimeVisualizations.length; i++) {\n\t\t\t\t/*\n    \tGet the song time visualization status and the visualization\n    \twidth. Calculate the computed width of the song as a percentage\n    \tof the player width and song played.\n    */\n\t\t\t\tvar songTimeVisualizationStatus = songTimeVisualizations[i].querySelectorAll('.amplitude-song-time-visualization-status');\n\t\t\t\tvar visualizationWidth = songTimeVisualizations[i].offsetWidth;\n\t\t\t\tvar computedWidth = visualizationWidth * (songPlayedPercentage / 100);\n\n\t\t\t\t/*\n    \tSet the inner element width to the computed width. This allows for the user\n    \tto define the width of the outer element and this will fill proportionally.\n    */\n\t\t\t\tsongTimeVisualizationStatus[0].setAttribute('style', 'width: ' + computedWidth + 'px');\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n   \tGet all of the individual song time visualizations.\n   */\n\t\t\tvar songTimeVisualizations = document.querySelectorAll('.amplitude-song-time-visualization[amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n\t\t\t/*\n   \tIterate over all of the individual song time visualizations setting\n   \tthe internal div to be the percentage of the parent container\n   \tequivalent to the percentage of the song played.\n   */\n\t\t\tfor (var i = 0; i < songTimeVisualizations.length; i++) {\n\t\t\t\t/*\n    \tEnsure the visualization doesn't have a playlist attribute.\n    */\n\t\t\t\tif (!songTimeVisualizations[i].hasAttribute('amplitude-playlist')) {\n\t\t\t\t\t/*\n     \tGet the song time visualization status and the visualization\n     \twidth. Calculate the computed width of the song as a percentage\n     \tof the player width and song played.\n     */\n\t\t\t\t\tvar songTimeVisualizationStatus = songTimeVisualizations[i].querySelectorAll('.amplitude-song-time-visualization-status');\n\t\t\t\t\tvar visualizationWidth = songTimeVisualizations[i].offsetWidth;\n\t\t\t\t\tvar computedWidth = visualizationWidth * (songPlayedPercentage / 100);\n\n\t\t\t\t\t/*\n     \tSet the inner element width to the computed width. This allows for the user\n     \tto define the width of the outer element and this will fill proportionally.\n     */\n\t\t\t\t\tsongTimeVisualizationStatus[0].setAttribute('style', 'width: ' + computedWidth + 'px');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets an element to be playing by removing the 'amplitude-paused' class\n \tand adding the 'amplitude-playing' class\n \t\t@param element element The element getting the playing class added.\n --------------------------------------------------------------------------*/\n\tfunction setElementPlay(element) {\n\t\telement.classList.add('amplitude-playing');\n\t\telement.classList.remove('amplitude-paused');\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tSets an element to be paused by adding the 'amplitude-paused' class\n \tand removing the 'amplitude-playing' class\n \t\t@param element element The element getting the paused class added.\n --------------------------------------------------------------------------*/\n\tfunction setElementPause(element) {\n\t\telement.classList.remove('amplitude-playing');\n\t\telement.classList.add('amplitude-paused');\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tUpdates any elements that display the duration hour for the song.\n \t\t@param int hours An integer conaining how many hours are in the song\n --------------------------------------------------------------------------*/\n\tfunction syncDurationHours(hours) {\n\t\t/*\n  \tGets all of the song hour selectors.\n  */\n\t\tif (_config2.default.active_playlist != null && _config2.default.active_playlist != '') {\n\t\t\tvar hourSelectors = ['.amplitude-duration-hours[amplitude-main-duration-hours=\"true\"]', '.amplitude-duration-hours[amplitude-playlist-duration-hours=\"true\"][amplitude-playlist=\"' + _config2.default.active_playlist + '\"]', '.amplitude-duration-hours[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t} else {\n\t\t\tvar hourSelectors = ['.amplitude-duration-hours[amplitude-main-duration-hours=\"true\"]', '.amplitude-duration-hours[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t}\n\n\t\t/*\n  \tEnsures that there are some hour selectors.\n  */\n\t\tif (document.querySelectorAll(hourSelectors.join()).length > 0) {\n\t\t\t/*\n   \tGet all of the hour selectors\n   */\n\t\t\tvar durationHourSelectors = document.querySelectorAll(hourSelectors.join());\n\n\t\t\t/*\n   \tSet the duration hour selector's inner html to hours passed in.\n   */\n\t\t\tfor (var i = 0; i < durationHourSelectors.length; i++) {\n\t\t\t\t/*\n    \tIf the selector is a main selector, we set the hours.\n    */\n\t\t\t\tif (durationHourSelectors[i].getAttribute('amplitude-main-duration-hours') == 'true') {\n\t\t\t\t\tdurationHourSelectors[i].innerHTML = hours;\n\t\t\t\t} else {\n\t\t\t\t\t/*\n     \tIf the active playlist is not null or empty\n     \tand the attribute of the playlist is equal to the\n     \tactive playlist, then we set the inner html.\n     */\n\t\t\t\t\tif (_config2.default.active_playlist != '' && _config2.default.active_playlist != null && durationHourSelectors[i].getAttribute('amplitude-playlist') == _config2.default.active_playlist) {\n\t\t\t\t\t\tdurationHourSelectors[i].innerHTML = hours;\n\t\t\t\t\t\t/*\n      \tIf the active playlist is not set and the selector\n      \tdoes not have a playlist then we set the hours. This\n      \tmeans that the duration selector is an individual song\n      \tselector.\n      */\n\t\t\t\t\t} else if (_config2.default.active_playlist == '' || _config2.default.active_playlist == null && !durationHourSelectors[i].hasAttribute('amplitude-playlist')) {\n\t\t\t\t\t\tdurationHourSelectors[i].innerHTML = hours;\n\t\t\t\t\t\t/*\n      \tIf nothing else matches, set the selector's inner HTML to '00'\n      */\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdurationHourSelectors[i].innerHTML = '00';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n Updates any elements that display the duration minutes for the song.\n \t@param int minutes An integer conaining how many minutes into\n the song.\n --------------------------------------------------------------------------*/\n\tfunction syncDurationMinutes(minutes) {\n\t\t/*\n  \tGets all of the song minute selectors.\n  */\n\t\tif (_config2.default.active_playlist != null && _config2.default.active_playlist != '') {\n\t\t\tvar minuteSelectors = ['.amplitude-duration-minutes[amplitude-main-duration-minutes=\"true\"]', '.amplitude-duration-minutes[amplitude-playlist-duration-minutes=\"true\"][amplitude-playlist=\"' + _config2.default.active_playlist + '\"]', '.amplitude-duration-minutes[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t} else {\n\t\t\tvar minuteSelectors = ['.amplitude-duration-minutes[amplitude-main-duration-minutes=\"true\"]', '.amplitude-duration-minutes[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t}\n\n\t\t/*\n  \tGet all of the minute selectors\n  */\n\t\tvar durationMinuteSelectors = document.querySelectorAll(minuteSelectors.join());\n\n\t\t/*\n  \tSet the duration minute selector's inner html to minutes passed in.\n  */\n\t\tfor (var i = 0; i < durationMinuteSelectors.length; i++) {\n\t\t\t/*\n   \tIf the selector is a main selector, we set the seconds.\n   */\n\t\t\tif (durationMinuteSelectors[i].getAttribute('amplitude-main-duration-minutes') == 'true') {\n\t\t\t\tdurationMinuteSelectors[i].innerHTML = minutes;\n\t\t\t} else {\n\t\t\t\t/*\n    \tIf the active playlist is not null or empty\n    \tand the attribute of the playlist is equal to the\n    \tactive playlist, then we set the inner html.\n    */\n\t\t\t\tif (_config2.default.active_playlist != '' && _config2.default.active_playlist != null && durationMinuteSelectors[i].getAttribute('amplitude-playlist') == _config2.default.active_playlist) {\n\t\t\t\t\tdurationMinuteSelectors[i].innerHTML = minutes;\n\t\t\t\t\t/*\n     \tIf the active playlist is not set and the selector\n     \tdoes not have a playlist then we set the minutes. This\n     \tmeans that the duration selector is an individual song\n     \tselector.\n     */\n\t\t\t\t} else if (_config2.default.active_playlist == '' || _config2.default.active_playlist == null && !durationMinuteSelectors[i].hasAttribute('amplitude-playlist')) {\n\t\t\t\t\tdurationMinuteSelectors[i].innerHTML = minutes;\n\t\t\t\t\t/*\n     \tIf nothing else matches, set the selector's inner HTML to '00'\n     */\n\t\t\t\t} else {\n\t\t\t\t\tdurationMinuteSelectors[i].innerHTML = '00';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n Updates any elements that display the duration seconds for the song.\n \t@param int minutes An integer conaining how many seconds into\n the song.\n --------------------------------------------------------------------------*/\n\tfunction syncDurationSeconds(seconds) {\n\t\t/*\n  \tGets all of the song second selectors. If the active playlist\n  \tis not null, then we get the playlist selectors.\n  */\n\t\tif (_config2.default.active_playlist != null && _config2.default.active_playlist != '') {\n\t\t\tvar secondSelectors = ['.amplitude-duration-seconds[amplitude-main-duration-seconds=\"true\"]', '.amplitude-duration-seconds[amplitude-playlist-duration-seconds=\"true\"][amplitude-playlist=\"' + _config2.default.active_playlist + '\"]', '.amplitude-duration-seconds[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t} else {\n\t\t\tvar secondSelectors = ['.amplitude-duration-seconds[amplitude-main-duration-seconds=\"true\"]', '.amplitude-duration-seconds[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\t\t}\n\n\t\t/*\n  \tGet all of the second selectors\n  */\n\t\tvar durationSecondSelectors = document.querySelectorAll(secondSelectors.join());\n\n\t\t/*\n  \tIterate over all of the second selectors.\n  */\n\t\tfor (var i = 0; i < durationSecondSelectors.length; i++) {\n\t\t\t/*\n   \tIf the selector is a main selector, we set the seconds.\n   */\n\t\t\tif (durationSecondSelectors[i].getAttribute('amplitude-main-duration-seconds') == 'true') {\n\t\t\t\tdurationSecondSelectors[i].innerHTML = seconds;\n\t\t\t} else {\n\t\t\t\t/*\n    \tIf the active playlist is not null or empty\n    \tand the attribute of the playlist is equal to the\n    \tactive playlist, then we set the inner html.\n    */\n\t\t\t\tif (_config2.default.active_playlist != '' && _config2.default.active_playlist != null && durationSecondSelectors[i].getAttribute('amplitude-playlist') == _config2.default.active_playlist) {\n\t\t\t\t\tdurationSecondSelectors[i].innerHTML = seconds;\n\t\t\t\t\t/*\n     \tIf the active playlist is not set and the selector\n     \tdoes not have a playlist then we set the seconds. This\n     \tmeans that the duration selector is an individual song\n     \tselector.\n     */\n\t\t\t\t} else if (_config2.default.active_playlist == '' || _config2.default.active_playlist == null && !durationSecondSelectors[i].hasAttribute('amplitude-playlist')) {\n\t\t\t\t\tdurationSecondSelectors[i].innerHTML = seconds;\n\t\t\t\t\t/*\n     \tIf nothing else matches, set the selector's inner HTML to '00'\n     */\n\t\t\t\t} else {\n\t\t\t\t\tdurationSecondSelectors[i].innerHTML = '00';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*--------------------------------------------------------------------------\n \tUpdates any elements that display the duration time for the song. This\n \tis a computed field that will be commonly used.\n \t\t@param JSON durationTime A json object conaining the parts for the\n \tduration time for the song.\n --------------------------------------------------------------------------*/\n\tfunction syncDurationTime(durationTime) {\n\t\t/*\n  \tGets all of the song time selectors.\n  */\n\t\tvar timeSelectors = ['.amplitude-duration-time[amplitude-main-duration-time=\"true\"]', '.amplitude-duration-time[amplitude-playlist-main-duration-time=\"' + _config2.default.active_playlist + '\"]', '.amplitude-duration-time[amplitude-song-index=\"' + _config2.default.active_index + '\"]'];\n\n\t\t/*\n  \tGet all of the time selectors.\n  */\n\t\tvar durationTimeSelectors = document.querySelectorAll(timeSelectors.join());\n\n\t\t/*\n  \tSet the time selector's inner html to the duration time for the song. The duration\n  \ttime is computed by joining minutes and seconds.\n  */\n\t\tfor (var i = 0; i < durationTimeSelectors.length; i++) {\n\t\t\tif (!isNaN(durationTime.minutes) && !isNaN(durationTime.seconds)) {\n\t\t\t\tdurationTimeSelectors[i].innerHTML = durationTime.minutes + ':' + durationTime.seconds;\n\t\t\t} else {\n\t\t\t\tdurationTimeSelectors[i].innerHTML = '00:00';\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n \tReturn the publically available functions.\n */\n\treturn {\n\t\tsyncCurrentHours: syncCurrentHours,\n\t\tsyncCurrentMinutes: syncCurrentMinutes,\n\t\tsyncCurrentSeconds: syncCurrentSeconds,\n\t\tsyncCurrentTime: syncCurrentTime,\n\t\tresetCurrentHours: resetCurrentHours,\n\t\tresetCurrentMinutes: resetCurrentMinutes,\n\t\tresetCurrentSeconds: resetCurrentSeconds,\n\t\tresetCurrentTime: resetCurrentTime,\n\t\tsyncSongTimeVisualizations: syncSongTimeVisualizations,\n\t\tsetElementPlay: setElementPlay,\n\t\tsetElementPause: setElementPause,\n\t\tsyncDurationHours: syncDurationHours,\n\t\tsyncDurationMinutes: syncDurationMinutes,\n\t\tsyncDurationSeconds: syncDurationSeconds,\n\t\tsyncDurationTime: syncDurationTime\n\t};\n}();\n\nexports.default = AmplitudeVisualSyncHelpers;\nmodule.exports = exports['default'];\n\n/***/ })\n/******/ ]);\n});"],"names":["init","const","episodes","window","MRF","Amplitude","songs","root","factory","module","this","modules","__webpack_require__","moduleId","installedModules","exports","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","config","active_song","Audio","active_metadata","active_album","active_index","active_playlist","autoplay","playback_speed","callbacks","playlists","shuffled_playlists","shuffled_statuses","shuffled_active_indexes","repeat","shuffle_list","shuffle_on","shuffle_active_index","default_album_art","debug","volume","pre_mute_volume","volume_increment","volume_decrement","soundcloud_client","soundcloud_use_art","soundcloud_song_count","soundcloud_songs_ready","is_touch_moving","_interopRequireDefault","obj","default","_core","_core2","_visual","_visual2","AmplitudeHelpers","resetConfig","handle_song_elements","writeDebugMessage","message","console","log","runCallback","callbackName","callbackFunction","error","changeSong","songIndex","song","stop","setPlayPauseButtonsToPause","resetSongSliders","resetSongTimeVisualizations","resetTimes","checkNewAlbum","setNewSong","displaySongMetadata","setActiveContainer","syncSongDuration","checkNewSong","newAlbum","checkNewPlaylist","playlist","index","src","url","album","shuffleSongs","shuffleTemp","Array","length","original_index","shuffleSwap","Math","floor","random","shufflePlaylistSongs","shuffleList","original","temp","setActivePlaylist","isURL","test","isInt","int","isNaN","parseInt","Number","_defineProperty","key","writable","_config","_config2","_helpers","_helpers2","AmplitudeVisualSync","syncCurrentTime","currentTime","completionPercentage","syncCurrentHours","hours","syncCurrentMinutes","minutes","syncCurrentSeconds","seconds","syncMainSliderLocation","syncPlaylistSliderLocation","syncSongSliderLocation","syncSongTimeVisualizations","resetCurrentHours","resetCurrentMinutes","resetCurrentSeconds","resetCurrentTime","songSliders","document","getElementsByClassName","songTimeVisualizations","querySelector","setAttribute","songContainers","classList","remove","querySelectorAll","hasAttribute","add","imageMetaDataKeys","songInfoElements","info","getAttribute","main","undefined","indexOf","innerHTML","setFirstSongInPlaylist","syncPlaybackSpeed","playbackSpeedClasses","playPauseElements","setElementPause","syncMainPlayPause","state","paused","setElementPlay","syncPlaylistPlayPause","playlistPlayPauseElements","syncSongPlayPause","songPlayPauseElements","syncRepeat","repeatClasses","syncMute","muteClasses","syncVolumeSliders","syncShuffle","shuffleButtons","syncPlaylistShuffle","location","mainSongSliders","playlistSongSliders","syncVolumeSliderLocation","volumeSliders","songDuration","syncDurationHours","syncDurationMinutes","syncDurationSeconds","syncDurationTime","_ref","AmplitudeCore","play","live","reconnectStream","navigator","userAgent","playbackRate","pause","disconnectStream","setVolume","volumeLevel","setSongLocation","songPercentage","duration","song_percentage","skipToLocation","addEventListener","once","load","playNow","setPlaybackSpeed","playbackSpeed","_handlers","_handlers2","AmplitudeEvents","initializeEvents","bindTimeUpdate","bindSongEnded","bindPlay","bindPause","bindPlayPause","bindStop","bindMute","bindVolumeUp","bindVolumeDown","bindSongSlider","bindVolumeSlider","bindNext","bindPrev","bindShuffle","bindRepeat","bindPlaybackSpeed","bindSkipTo","removeEventListener","updateTime","songEnded","play_classes","pause_classes","play_pause_classes","playPause","stop_classes","mute_classes","mute","volume_up_classes","volumeUp","volume_down_classes","volumeDown","ua","msie","song_sliders","match","songSlider","volume_sliders","volumeSlider","next_classes","next","prev_classes","prev","shuffle_classes","shuffle","repeat_classes","playback_speed_classes","skipToClasses","skipTo","AmplitudeEventHelpers","computeCurrentTimes","currentSeconds","currentMinutes","currentHours","computeSongDuration","songDurationSeconds","songDurationMinutes","songDurationHours","computeSongCompletionPercentage","speed","setRepeat","setMainPlayPause","setPlaylistPlayPause","setSongPlayPause","setShuffle","setNext","arguments","nextIndex","endOfList","setNextPlaylist","shuffledPlaylistActiveSongIndex","playlistActiveSongIndex","setPrev","prevIndex","setPrevPlaylist","_events","_events2","_soundcloud","_soundcloud2","AmplitudeInitializer","initialize","userConfig","ready","initializeSongTimeVisualizations","countPlaylists","initializeDefaultLiveSettings","checkValidSongsInPlaylists","initializePlaylistShuffleStatuses","initializePlaylistShuffleLists","initializePlaylistShuffleIndexes","initializeFirstSongInPlaylistMetaData","tempUserConfig","loadSoundCloud","setConfig","rebindDisplay","start_song","preload","song_time_visualizations","status","createElement","appendChild","size","_helpers3","_helpers4","songCompletionPercentage","playButtonSongIndex","playButtonPlaylistIndex","pauseButtonSongIndex","pauseButtonPlaylistIndex","locationPercentage","isFinite","_init","_init2","bindNewElements","getActivePlaylist","getPlaybackSpeed","getRepeat","getShuffle","getShufflePlaylist","getDefaultAlbumArt","setDefaultAlbumArt","getSongPlayedPercentage","setSongPlayedPercentage","percentage","setDebug","getActiveSongMetadata","getSongByIndex","getSongAtPlaylistIndex","addSong","push","getAudio","AmplitudeSoundcloud","head","getElementsByTagName","script","type","onreadystatechange","initSoundcloud","onload","SC","client_id","getStreamableURLs","soundcloud_regex","resolveStreamable","sound","streamable","stream_url","cover_art_url","artwork_url","soundcloud_data","artist","AmplitudeVisualSyncHelpers","hourSelectors","join","currentHourSelectors","minuteSelectors","currentMinuteSelectors","secondSelectors","currentSecondSelectors","timeSelectors","currentTimeSelectors","songPlayedPercentage","syncMainSongTimeVisualizations","syncPlaylistSongTimeVisualizations","syncIndividualSongTimeVisualizations","mainSongTimeVisualizations","songTimeVisualizationStatus","visualizationWidth","offsetWidth","computedWidth","playlistSongTimeVisualizations","element","durationHourSelectors","durationMinuteSelectors","durationSecondSelectors","durationTime","durationTimeSelectors"],"mappings":"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"}